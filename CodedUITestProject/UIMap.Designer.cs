// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 14.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// StartTeacherRecordedMethod
        /// </summary>
        public void StartTeacherRecordedMethod()
        {
            #region Variable Declarations
            WinEdit uIИмяEdit = this.UICodedUIWindow.UIItemWindow1.UITeacherAppListItem.UIИмяEdit;
            #endregion

            // Двойной щелчок "Имя" надпись
            Mouse.DoubleClick(uIИмяEdit, new Point(56, 18));
        }
        
        /// <summary>
        /// CloseTeacherAppRecordedMethod
        /// </summary>
        public void CloseTeacherAppRecordedMethod()
        {
            #region Variable Declarations
            WinButton uIЗакрытьButton = this.UIСетевыеинформационныWindow.UIЗакрытьButton;
            #endregion

            // Щелкните "Закрыть" кнопка
            Mouse.Click(uIЗакрытьButton, new Point(12, 6));
        }
        
        /// <summary>
        /// Проверка главных экранов редактирования вопросов и просмотра результатов
        /// </summary>
        public void BaseViewShowRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton;
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIНазадButton;
            WpfButton uIРезультатыButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom2.UIРезультатыButton;
            #endregion

            // Щелкните "Редактировать тест" кнопка
            Mouse.Click(uIРедактироватьтестButton, new Point(70, 22));

            // Щелкните "Назад" кнопка
            Mouse.Click(uIНазадButton, new Point(95, 25));

            // Щелкните "Результаты" кнопка
            Mouse.Click(uIРезультатыButton, new Point(59, 15));
        }
        
        /// <summary>
        /// Тест для проверки функции добавления нового вопроса
        /// </summary>
        public void AddNewQuestionRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton;
            WpfButton uIРедактироватьдобавитButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIРедактироватьдобавитButton;
            WpfButton uIДобавитьновыйButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIДобавитьновыйButton;
            WpfEdit uIItemEdit = this.UIWpfWindow.UIItemEdit;
            WpfButton uIДобавитьButton = this.UIWpfWindow.UIДобавитьButton;
            WpfEdit uIItemEdit1 = this.UIWpfWindow.UIItemList.UIWCFServiceLibraryAnsListItem.UIItemEdit;
            WpfEdit uIItemEdit2 = this.UIWpfWindow.UIItemList.UIWCFServiceLibraryAnsListItem1.UIItemEdit;
            WpfEdit uIItemEdit3 = this.UIWpfWindow.UIItemList.UIWCFServiceLibraryAnsListItem2.UIItemEdit;
            WpfCheckBox uIItemCheckBox = this.UIWpfWindow.UIItemList.UIWCFServiceLibraryAnsListItem2.UIItemCheckBox;
            WpfButton uIГотовоButton = this.UIWpfWindow.UIГотовоButton;
            #endregion

            // Щелкните "Редактировать тест" кнопка
            Mouse.Click(uIРедактироватьтестButton, new Point(174, 19));

            // Щелкните "Редактировать/добавить" кнопка
            Mouse.Click(uIРедактироватьдобавитButton, new Point(111, 33));

            // Щелкните "Добавить новый" кнопка
            Mouse.Click(uIДобавитьновыйButton, new Point(91, 16));

            // Ввести "TestQuestion1" в надпись
            uIItemEdit.Text = this.AddNewQuestionRecordedMethodParams.UIItemEditText;

            // Щелкните "Добавить" кнопка
            Mouse.Click(uIДобавитьButton, new Point(47, 27));

            // Ввести "Case 1" в надпись
            uIItemEdit1.Text = this.AddNewQuestionRecordedMethodParams.UIItemEditText1;

            // Щелкните "Добавить" кнопка
            Mouse.Click(uIДобавитьButton, new Point(60, 21));

            // Ввести "Case 2" в надпись
            uIItemEdit2.Text = this.AddNewQuestionRecordedMethodParams.UIItemEditText2;

            // Щелкните "Добавить" кнопка
            Mouse.Click(uIДобавитьButton, new Point(54, 27));

            // Ввести "Case 3" в надпись
            uIItemEdit3.Text = this.AddNewQuestionRecordedMethodParams.UIItemEditText3;

            // Выбрать флажок
            uIItemCheckBox.Checked = this.AddNewQuestionRecordedMethodParams.UIItemCheckBoxChecked;

            // Щелкните "Готово" кнопка
            Mouse.Click(uIГотовоButton, new Point(45, 21));
        }
        
        /// <summary>
        /// ResultAddQuestionEqualMethod - Используйте "ResultAddQuestionEqualMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ResultAddQuestionEqualMethod()
        {
            #region Variable Declarations
            WpfListItem uIWCFServiceLibraryQueListItem = this.UIСетевыеинформационныWindow1.UIItemCustom1.UIItemList.UIWCFServiceLibraryQueListItem;
            #endregion

            // Убедитесь, что свойство ControlType "WCFServiceLibrary.Question" элемент списка равняется "ListItem"
            Assert.AreEqual(this.ResultAddQuestionEqualMethodExpectedValues.UIWCFServiceLibraryQueListItemControlType, uIWCFServiceLibraryQueListItem.ControlType.ToString(), "Вопрос не добавлен!");
        }
        
        /// <summary>
        /// AboutAssertMethod - Используйте "AboutAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AboutAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIОпрограммеButton = this.UIСетевыеинформационныWindow1.UIОпрограммеButton;
            #endregion

            // Убедитесь, что свойство DisplayText "О программе" кнопка равняется "О программе"
            Assert.AreEqual(this.AboutAssertMethodExpectedValues.UIОпрограммеButtonDisplayText, uIОпрограммеButton.DisplayText, "Нет кнопки \"О программе\"");
        }
        
        /// <summary>
        /// TestDisciplineNameCheck - Используйте "TestDisciplineNameCheckExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void TestDisciplineNameCheck()
        {
            #region Variable Declarations
            WpfText uIСетевыеинформационныText = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIСетевыеинформационныText;
            #endregion

            // Убедитесь, что свойство DisplayText "''Сетевые информационные технологии''" надпись равняется "''Сетевые информационные технологии'' "
            Assert.AreEqual(this.TestDisciplineNameCheckExpectedValues.UIСетевыеинформационныTextDisplayText, uIСетевыеинформационныText.DisplayText, "Неверное наименование теста");
        }
        
        /// <summary>
        /// EditTestButtonExistMethod - Используйте "EditTestButtonExistMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void EditTestButtonExistMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton1;
            #endregion

            // Убедитесь, что свойство Exists "Редактировать тест" кнопка равняется "True"
            Assert.AreEqual(this.EditTestButtonExistMethodExpectedValues.UIРедактироватьтестButton1Exists, uIРедактироватьтестButton1.Exists, "Проблемы с кнопкой \"Редактировать тест\"");
        }
        
        /// <summary>
        /// ResultButtonAssertMethod - Используйте "ResultButtonAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ResultButtonAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIРезультатыButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРезультатыButton1;
            #endregion

            // Убедитесь, что свойство Exists "Результаты" кнопка равняется "True"
            Assert.AreEqual(this.ResultButtonAssertMethodExpectedValues.UIРезультатыButton1Exists, uIРезультатыButton1.Exists, "Проблемы с кнопкой \"Результаты\"");
        }
        
        /// <summary>
        /// AssertMethod1 - Используйте "AssertMethod1ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfButton uIОпрограммеButton1 = this.UIСетевыеинформационныWindow1.UIОпрограммеButton1;
            #endregion

            // Убедитесь, что свойство Exists "О программе" кнопка равняется "True"
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIОпрограммеButton1Exists, uIОпрограммеButton1.Exists, "Проблемы с кнопкой \"О програме\"");
        }
        
        /// <summary>
        /// StatusBarAssertMethod - Используйте "StatusBarAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void StatusBarAssertMethod()
        {
            #region Variable Declarations
            WpfText uIСервисдлятестированиText = this.UIСетевыеинформационныWindow1.UIСервисдлятестированиText;
            #endregion

            // Убедитесь, что свойство Exists "Сервис для тестирования доступен!" надпись равняется "True"
            Assert.AreEqual(this.StatusBarAssertMethodExpectedValues.UIСервисдлятестированиTextExists, uIСервисдлятестированиText.Exists, "Проблемы со строкой состояния");
        }
        
        /// <summary>
        /// TestEditViewOpenRecordedMethod
        /// </summary>
        public void TestEditViewOpenRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton1;
            #endregion

            // Щелкните "Редактировать тест" кнопка
            Mouse.Click(uIРедактироватьтестButton1, new Point(121, 15));
        }
        
        /// <summary>
        /// TestEditBackRecordedMethod
        /// </summary>
        public void TestEditBackRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIНазадButton;
            #endregion

            // Щелкните "Назад" кнопка
            Mouse.Click(uIНазадButton, new Point(116, 27));
        }
        
        /// <summary>
        /// AddEditBtnAssertMethod - Используйте "AddEditBtnAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AddEditBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьдобавитButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIРедактироватьдобавитButton;
            #endregion

            // Убедитесь, что свойство Exists "Редактировать/добавить" кнопка равняется "True"
            Assert.AreEqual(this.AddEditBtnAssertMethodExpectedValues.UIРедактироватьдобавитButtonExists, uIРедактироватьдобавитButton.Exists, "Проблемы с кнопкой \"Редактировать\\Добавить\"");
        }
        
        /// <summary>
        /// TestParamAssertMethod - Используйте "TestParamAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void TestParamAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIЗадатьпараметрытестаButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIЗадатьпараметрытестаButton;
            #endregion

            // Убедитесь, что свойство Exists "Задать параметры теста" кнопка равняется "True"
            Assert.AreEqual(this.TestParamAssertMethodExpectedValues.UIЗадатьпараметрытестаButtonExists, uIЗадатьпараметрытестаButton.Exists, "Проблемы с кнопкой \"Параметры теста\"");
        }
        
        /// <summary>
        /// BackBtnAssertMethod - Используйте "BackBtnAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void BackBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIНазадButton;
            #endregion

            // Убедитесь, что свойство Exists "Назад" кнопка равняется "True"
            Assert.AreEqual(this.BackBtnAssertMethodExpectedValues.UIНазадButtonExists, uIНазадButton.Exists, "Проблемы с кнопкой \"Назад\"");
        }
        
        /// <summary>
        /// BackButtonTestEditRecordedMethod
        /// </summary>
        public void BackButtonTestEditRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton1;
            WpfButton uIНазадButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIНазадButton1;
            #endregion

            // Щелкните "Редактировать тест" кнопка
            Mouse.Click(uIРедактироватьтестButton1, new Point(137, 29));

            // Щелкните "Назад" кнопка
            Mouse.Click(uIНазадButton1, new Point(122, 24));
        }
        
        /// <summary>
        /// TestEditFormShowMethod
        /// </summary>
        public void TestEditFormShowMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton1;
            WpfButton uIРедактироватьдобавитButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIРедактироватьдобавитButton1;
            #endregion

            // Щелкните "Редактировать тест" кнопка
            Mouse.Click(uIРедактироватьтестButton1, new Point(113, 12));

            // Щелкните "Редактировать/добавить" кнопка
            Mouse.Click(uIРедактироватьдобавитButton1, new Point(109, 23));
        }
        
        /// <summary>
        /// EditBtnAssertMethod - Используйте "EditBtnAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void EditBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIРедактироватьButton;
            #endregion

            // Убедитесь, что свойство Exists "Редактировать" кнопка равняется "True"
            Assert.AreEqual(this.EditBtnAssertMethodExpectedValues.UIРедактироватьButtonExists, uIРедактироватьButton.Exists, "Не найдена кнопка \"Редактировать\"");

            // Убедитесь, что свойство Enabled "Редактировать" кнопка равняется "False"
            Assert.AreEqual(this.EditBtnAssertMethodExpectedValues.UIРедактироватьButtonEnabled, uIРедактироватьButton.Enabled, "Кнопка \"Редактировать\" по умолчанию доступна");
        }
        
        /// <summary>
        /// DeleteBtnAssertMethod - Используйте "DeleteBtnAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void DeleteBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIУдалитьButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIУдалитьButton;
            #endregion

            // Убедитесь, что свойство Exists "Удалить" кнопка равняется "True"
            Assert.AreEqual(this.DeleteBtnAssertMethodExpectedValues.UIУдалитьButtonExists, uIУдалитьButton.Exists, "Не найдена кнопка \"Удалить\"");

            // Убедитесь, что свойство Enabled "Удалить" кнопка равняется "False"
            Assert.AreEqual(this.DeleteBtnAssertMethodExpectedValues.UIУдалитьButtonEnabled, uIУдалитьButton.Enabled, "Кнопка \"Удалить\" по умолчанию доступна");
        }
        
        /// <summary>
        /// NewBtnAssertMethod - Используйте "NewBtnAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void NewBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIДобавитьновыйButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIДобавитьновыйButton1;
            #endregion

            // Убедитесь, что свойство Exists "Добавить новый" кнопка равняется "True"
            Assert.AreEqual(this.NewBtnAssertMethodExpectedValues.UIДобавитьновыйButton1Exists, uIДобавитьновыйButton1.Exists, "Не найдена кнопка \"Добавить новый\"");

            // Убедитесь, что свойство Enabled "Добавить новый" кнопка равняется "True"
            Assert.AreEqual(this.NewBtnAssertMethodExpectedValues.UIДобавитьновыйButton1Enabled, uIДобавитьновыйButton1.Enabled, "Не доступна кнопка \"Добавить новый\"");
        }
        
        /// <summary>
        /// BackBtnAddEditAssertMethod - Используйте "BackBtnAddEditAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void BackBtnAddEditAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIНазадButton;
            #endregion

            // Убедитесь, что свойство Exists "Назад" кнопка равняется "True"
            Assert.AreEqual(this.BackBtnAddEditAssertMethodExpectedValues.UIНазадButtonExists, uIНазадButton.Exists, "Не найдена кнопка \"Назад\"");

            // Убедитесь, что свойство Enabled "Назад" кнопка равняется "True"
            Assert.AreEqual(this.BackBtnAddEditAssertMethodExpectedValues.UIНазадButtonEnabled, uIНазадButton.Enabled, "Кнопка \"Назад\" недоступна");
        }
        
        /// <summary>
        /// OpneEditWindowRecordedMethod
        /// </summary>
        public void OpneEditWindowRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton1;
            WpfButton uIРедактироватьдобавитButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom11.UIРедактироватьдобавитButton1;
            #endregion

            // Щелкните "Редактировать тест" кнопка
            Mouse.Click(uIРедактироватьтестButton1, new Point(133, 11));

            // Щелкните "Редактировать/добавить" кнопка
            Mouse.Click(uIРедактироватьдобавитButton1, new Point(46, 32));
        }
        
        /// <summary>
        /// EditButtonEnabledAssertMethod - Используйте "EditButtonEnabledAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void EditButtonEnabledAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIРедактироватьButton;
            #endregion

            // Убедитесь, что свойство Enabled "Редактировать" кнопка равняется "False"
            Assert.AreEqual(this.EditButtonEnabledAssertMethodExpectedValues.UIРедактироватьButtonEnabled, uIРедактироватьButton.Enabled, "Кнопка \"Редактировать\" доступна по умолчанию");
        }
        
        /// <summary>
        /// DeleteBtnEnabledAssertMethod - Используйте "DeleteBtnEnabledAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void DeleteBtnEnabledAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIУдалитьButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIУдалитьButton;
            #endregion

            // Убедитесь, что свойство Enabled "Удалить" кнопка равняется "False"
            Assert.AreEqual(this.DeleteBtnEnabledAssertMethodExpectedValues.UIУдалитьButtonEnabled, uIУдалитьButton.Enabled, "Кнопка \"Удалить\" достпуна по умолчанию");
        }
        
        /// <summary>
        /// QuestionItemSelectRecordedMethod - Используйте "QuestionItemSelectRecordedMethodParams" для передачи параметров в этот метод.
        /// </summary>
        public void QuestionItemSelectRecordedMethod()
        {
            #region Variable Declarations
            WpfList uIItemList = this.UIСетевыеинформационныWindow1.UIItemCustom1.UIСписоквопросовText.UIItemList;
            #endregion

            // Выберите "WCFServiceLibrary.Question" в первый список рядом с "Список вопросов:" надпись
            uIItemList.SelectedItemsAsString = this.QuestionItemSelectRecordedMethodParams.UIItemListSelectedItemsAsString;
        }
        
        /// <summary>
        /// EditBtnQuestionSelectedEnableAssertMethod - Используйте "EditBtnQuestionSelectedEnableAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void EditBtnQuestionSelectedEnableAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIРедактироватьButton;
            #endregion

            // Убедитесь, что свойство Enabled "Редактировать" кнопка равняется "True"
            Assert.AreEqual(this.EditBtnQuestionSelectedEnableAssertMethodExpectedValues.UIРедактироватьButtonEnabled, uIРедактироватьButton.Enabled, "Кнопка \"Редактировать\" недоступна при выделенном элементе");
        }
        
        /// <summary>
        /// DeleteBtnQuestionSelectedEnableAssertMethod - Используйте "DeleteBtnQuestionSelectedEnableAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void DeleteBtnQuestionSelectedEnableAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIУдалитьButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIУдалитьButton;
            #endregion

            // Убедитесь, что свойство Enabled "Удалить" кнопка равняется "True"
            Assert.AreEqual(this.DeleteBtnQuestionSelectedEnableAssertMethodExpectedValues.UIУдалитьButtonEnabled, uIУдалитьButton.Enabled, "Кнопка \"Удалить\" недоступна при выделенном элементе");
        }
        
        /// <summary>
        /// NewQuestionWindowOpenRecordedMethod
        /// </summary>
        public void NewQuestionWindowOpenRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIДобавитьновыйButton1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom21.UIДобавитьновыйButton1;
            #endregion

            // Щелкните "Добавить новый" кнопка
            Mouse.Click(uIДобавитьновыйButton1, new Point(65, 9));
        }
        
        /// <summary>
        /// QuestionNameTextFieldAssertMethod - Используйте "QuestionNameTextFieldAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void QuestionNameTextFieldAssertMethod()
        {
            #region Variable Declarations
            WpfEdit uIItemEdit = this.UIWpfWindow.UIItemEdit;
            #endregion

            // Убедитесь, что свойство Exists надпись равняется "True"
            Assert.AreEqual(this.QuestionNameTextFieldAssertMethodExpectedValues.UIItemEditExists, uIItemEdit.Exists, "Не найдено поле для ввода вопроса");
        }
        
        /// <summary>
        /// AnswerFiledAssertMethod - Используйте "AnswerFiledAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AnswerFiledAssertMethod()
        {
            #region Variable Declarations
            WpfList uIItemList = this.UIWpfWindow.UIItemList;
            #endregion

            // Убедитесь, что свойство Exists список равняется "True"
            Assert.AreEqual(this.AnswerFiledAssertMethodExpectedValues.UIItemListExists, uIItemList.Exists, "Не найдено поле для ввода вариантов ответа");
        }
        
        /// <summary>
        /// AddAnswerBtnExistEnableAssertMethod - Используйте "AddAnswerBtnExistEnableAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AddAnswerBtnExistEnableAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIДобавитьButton = this.UIWpfWindow.UIДобавитьButton;
            #endregion

            // Убедитесь, что свойство Exists "Добавить" кнопка равняется "True"
            Assert.AreEqual(this.AddAnswerBtnExistEnableAssertMethodExpectedValues.UIДобавитьButtonExists, uIДобавитьButton.Exists, "Не найдена кнопка \"Добавить\"");

            // Убедитесь, что свойство Enabled "Добавить" кнопка равняется "True"
            Assert.AreEqual(this.AddAnswerBtnExistEnableAssertMethodExpectedValues.UIДобавитьButtonEnabled, uIДобавитьButton.Enabled, "Кнопка \"Добавить\" недоступна по умолчанию");
        }
        
        /// <summary>
        /// AnswerDeleteBtnExistEnabledAssertMethod - Используйте "AnswerDeleteBtnExistEnabledAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AnswerDeleteBtnExistEnabledAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIУдалитьButton = this.UIWpfWindow.UIУдалитьButton;
            #endregion

            // Убедитесь, что свойство Exists "Удалить" кнопка равняется "True"
            Assert.AreEqual(this.AnswerDeleteBtnExistEnabledAssertMethodExpectedValues.UIУдалитьButtonExists, uIУдалитьButton.Exists, "Не найдена кнопка \"Удалить\"");

            // Убедитесь, что свойство Enabled "Удалить" кнопка равняется "False"
            Assert.AreEqual(this.AnswerDeleteBtnExistEnabledAssertMethodExpectedValues.UIУдалитьButtonEnabled, uIУдалитьButton.Enabled, "Кнопка \"Удалить\" доступна по умолчанию");
        }
        
        /// <summary>
        /// NewQuestionOkBtnExistAssertMethod - Используйте "NewQuestionOkBtnExistAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void NewQuestionOkBtnExistAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIГотовоButton = this.UIWpfWindow.UIГотовоButton;
            #endregion

            // Убедитесь, что свойство Exists "Готово" кнопка равняется "True"
            Assert.AreEqual(this.NewQuestionOkBtnExistAssertMethodExpectedValues.UIГотовоButtonExists, uIГотовоButton.Exists, "Кнопка \"Готово\" не найдена");
        }
        
        /// <summary>
        /// NewQuestionCancelBtnExistAssertMethod - Используйте "NewQuestionCancelBtnExistAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void NewQuestionCancelBtnExistAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIОтменаButton = this.UIWpfWindow.UIОтменаButton;
            #endregion

            // Убедитесь, что свойство Exists "Отмена" кнопка равняется "True"
            Assert.AreEqual(this.NewQuestionCancelBtnExistAssertMethodExpectedValues.UIОтменаButtonExists, uIОтменаButton.Exists, "Кнопка \"Отмена\" не найдена");
        }
        
        /// <summary>
        /// AddQuestionCancelRecordedMethod
        /// </summary>
        public void AddQuestionCancelRecordedMethod()
        {
            #region Variable Declarations
            WpfButton uIОтменаButton = this.UIWpfWindow.UIОтменаButton;
            #endregion

            // Щелкните "Отмена" кнопка
            Mouse.Click(uIОтменаButton, new Point(78, 13));
        }
        
        /// <summary>
        /// StartStudentAppRecordedMethod
        /// </summary>
        public void StartStudentAppRecordedMethod()
        {
            #region Variable Declarations
            WinEdit uIИмяEdit = this.UICodedUIStudentAppWindow.UIItemWindow.UITestSystemAppListItem.UIИмяEdit;
            #endregion

            // Двойной щелчок "Имя" надпись
            Mouse.DoubleClick(uIИмяEdit, new Point(47, 16));
        }
        
        /// <summary>
        /// CloseStudAppRecordedMethod1
        /// </summary>
        public void CloseStudAppRecordedMethod1()
        {
            #region Variable Declarations
            WinButton uIЗакрытьButton = this.UIСетевыеинформационныWindow.UIЗакрытьButton;
            #endregion

            // Щелкните "Закрыть" кнопка
            Mouse.Click(uIЗакрытьButton, new Point(21, 3));
        }
        
        /// <summary>
        /// BtnOKExistAssertMethod2 - Используйте "BtnOKExistAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void BtnOKExistAssertMethod2()
        {
            #region Variable Declarations
            WpfButton uIOKButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom12.UIOKButton;
            #endregion

            // Убедитесь, что свойство Exists "OK" кнопка равняется "True"
            Assert.AreEqual(this.BtnOKExistAssertMethod2ExpectedValues.UIOKButtonExists, uIOKButton.Exists, "Отсутствует кнопка \"ОК\"");
        }
        
        /// <summary>
        /// NameTestStudAppAssertMethod2 - Используйте "NameTestStudAppAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void NameTestStudAppAssertMethod2()
        {
            #region Variable Declarations
            WpfText uIСетиText = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom12.UIСетиText;
            #endregion

            // Убедитесь, что свойство DisplayText "Сети" надпись равняется "Сетевыеинформационные технологии"
            Assert.AreEqual(this.NameTestStudAppAssertMethod2ExpectedValues.UIСетиTextDisplayText, uIСетиText.DisplayText, "Некорректное название дисциплины");
        }
        
        /// <summary>
        /// TransitToRegistrationFormRecordedMethod1
        /// </summary>
        public void TransitToRegistrationFormRecordedMethod1()
        {
            #region Variable Declarations
            WpfButton uIOKButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom12.UIOKButton;
            #endregion

            // Щелкните "OK" кнопка
            Mouse.Click(uIOKButton, new Point(34, 18));
        }
        
        /// <summary>
        /// NameFormAssertMethod2 - Используйте "NameFormAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void NameFormAssertMethod2()
        {
            #region Variable Declarations
            WpfText uIРегистрацияText = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIРегистрацияText;
            #endregion

            // Убедитесь, что свойство DisplayText "Регистрация" надпись равняется " Регистрация"
            Assert.AreEqual(this.NameFormAssertMethod2ExpectedValues.UIРегистрацияTextDisplayText, uIРегистрацияText.DisplayText, "Некорректное название ");

            // Убедитесь, что свойство Exists "Регистрация" надпись равняется "True"
            Assert.AreEqual(this.NameFormAssertMethod2ExpectedValues.UIРегистрацияTextExists, uIРегистрацияText.Exists, "Отсутвует название \"Регистрация\"");
        }
        
        /// <summary>
        /// TitleNameStudAppAssertMethod2 - Используйте "TitleNameStudAppAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void TitleNameStudAppAssertMethod2()
        {
            #region Variable Declarations
            WpfText uIТестированиеподисципText = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom12.UIТестированиеподисципText;
            #endregion

            // Убедитесь, что свойство DisplayText "Тестирование по дисциплине:" надпись равняется "Тестирование по дисциплине:"
            Assert.AreEqual(this.TitleNameStudAppAssertMethod2ExpectedValues.UIТестированиеподисципTextDisplayText, uIТестированиеподисципText.DisplayText, "yyyyy");
        }
        
        /// <summary>
        /// BtnDoneNoActiveAssertMethod2 - Используйте "BtnDoneNoActiveAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void BtnDoneNoActiveAssertMethod2()
        {
            #region Variable Declarations
            WpfButton uIГотовоButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГотовоButton;
            #endregion

            // Убедитесь, что свойство Exists "Готово" кнопка равняется "True"
            Assert.AreEqual(this.BtnDoneNoActiveAssertMethod2ExpectedValues.UIГотовоButtonExists, uIГотовоButton.Exists, "Отсутствует кнопка Готово");

            // Убедитесь, что свойство Enabled "Готово" кнопка равняется "False"
            Assert.AreEqual(this.BtnDoneNoActiveAssertMethod2ExpectedValues.UIГотовоButtonEnabled, uIГотовоButton.Enabled, "Кнопка доступна");
        }
        
        /// <summary>
        /// TestBtnDoneRecordedMethod1 - Используйте "TestBtnDoneRecordedMethod1Params" для передачи параметров в этот метод.
        /// </summary>
        public void TestBtnDoneRecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uIItemEdit = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIФамилияText.UIItemEdit;
            WpfEdit uIItemEdit1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIИмяText.UIItemEdit;
            WpfButton uIГотовоButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГотовоButton;
            #endregion

            // Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
            uIItemEdit.Text = this.TestBtnDoneRecordedMethod1Params.UIItemEditText;

            // Тип "Имя" в первый надпись рядом с "Имя:" надпись
            uIItemEdit1.Text = this.TestBtnDoneRecordedMethod1Params.UIItemEditText1;

            // Щелкните "Готово" кнопка
            Mouse.Click(uIГотовоButton, new Point(58, 23));
        }
        
        /// <summary>
        /// BtnDoneNoCompleteDataAssertMethod2 - Используйте "BtnDoneNoCompleteDataAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void BtnDoneNoCompleteDataAssertMethod2()
        {
            #region Variable Declarations
            WpfEdit uIItemEdit = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIФамилияText.UIItemEdit;
            WpfEdit uIItemEdit1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIИмяText.UIItemEdit;
            WpfButton uIГотовоButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГотовоButton;
            #endregion

            // Убедитесь, что свойство Text первый надпись рядом с "Фамилия:" надпись равняется "Фамилия"
            Assert.AreEqual(this.BtnDoneNoCompleteDataAssertMethod2ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Убедитесь, что свойство Text первый надпись рядом с "Имя:" надпись равняется "Имя"
            Assert.AreEqual(this.BtnDoneNoCompleteDataAssertMethod2ExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Убедитесь, что свойство Enabled "Готово" кнопка равняется "False"
            Assert.AreEqual(this.BtnDoneNoCompleteDataAssertMethod2ExpectedValues.UIГотовоButtonEnabled, uIГотовоButton.Enabled, "Кнопка доступна");
        }
        
        /// <summary>
        /// BtnDoneFullCompleteRecordedMethod1 - Используйте "BtnDoneFullCompleteRecordedMethod1Params" для передачи параметров в этот метод.
        /// </summary>
        public void BtnDoneFullCompleteRecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uIItemEdit = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIФамилияText.UIItemEdit;
            WpfEdit uIItemEdit1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIИмяText.UIItemEdit;
            WpfEdit uIItemEdit2 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГруппаText.UIItemEdit;
            WpfButton uIГотовоButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГотовоButton;
            #endregion

            // Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
            uIItemEdit.Text = this.BtnDoneFullCompleteRecordedMethod1Params.UIItemEditText;

            // Тип "Имя" в первый надпись рядом с "Имя:" надпись
            uIItemEdit1.Text = this.BtnDoneFullCompleteRecordedMethod1Params.UIItemEditText1;

            // Тип "1234" в первый надпись рядом с "Группа:" надпись
            uIItemEdit2.Text = this.BtnDoneFullCompleteRecordedMethod1Params.UIItemEditText2;

            // Щелкните "Готово" кнопка
            Mouse.Click(uIГотовоButton, new Point(63, 31));
        }
        
        /// <summary>
        /// BtnDoneFullCompleteAssertMethod2 - Используйте "BtnDoneFullCompleteAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void BtnDoneFullCompleteAssertMethod2()
        {
            #region Variable Declarations
            WpfEdit uIItemEdit = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIФамилияText.UIItemEdit;
            WpfEdit uIItemEdit1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIИмяText.UIItemEdit;
            WpfEdit uIItemEdit2 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГруппаText.UIItemEdit;
            WpfButton uIГотовоButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГотовоButton;
            #endregion

            // Убедитесь, что свойство Text первый надпись рядом с "Фамилия:" надпись равняется "Фамилия"
            Assert.AreEqual(this.BtnDoneFullCompleteAssertMethod2ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Убедитесь, что свойство Text первый надпись рядом с "Имя:" надпись равняется "Имя"
            Assert.AreEqual(this.BtnDoneFullCompleteAssertMethod2ExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Убедитесь, что свойство Text первый надпись рядом с "Имя:" надпись равняется "Имя"
            Assert.AreEqual(this.BtnDoneFullCompleteAssertMethod2ExpectedValues.UIItemEditText2, uIItemEdit1.Text);

            // Убедитесь, что свойство Text первый надпись рядом с "Группа:" надпись равняется "1234"
            Assert.AreEqual(this.BtnDoneFullCompleteAssertMethod2ExpectedValues.UIItemEditText3, uIItemEdit2.Text);

            // Убедитесь, что свойство Enabled "Готово" кнопка равняется "True"
            Assert.AreEqual(this.BtnDoneFullCompleteAssertMethod2ExpectedValues.UIГотовоButtonEnabled, uIГотовоButton.Enabled, "Кнопка не доступна");
        }
        
        /// <summary>
        /// BtnDoneNoCompleteDataRecordedMethod1 - Используйте "BtnDoneNoCompleteDataRecordedMethod1Params" для передачи параметров в этот метод.
        /// </summary>
        public void BtnDoneNoCompleteDataRecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uIItemEdit = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIФамилияText.UIItemEdit;
            WpfButton uIГотовоButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГотовоButton;
            WpfEdit uIItemEdit1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIИмяText.UIItemEdit;
            WpfEdit uIItemEdit2 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГруппаText.UIItemEdit;
            #endregion

            // Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
            uIItemEdit.Text = this.BtnDoneNoCompleteDataRecordedMethod1Params.UIItemEditText;

            // Щелкните "Готово" кнопка
            Mouse.Click(uIГотовоButton, new Point(64, 28));

            // Тип "" в первый надпись рядом с "Фамилия:" надпись
            uIItemEdit.Text = this.BtnDoneNoCompleteDataRecordedMethod1Params.UIItemEditText1;

            // Тип "{Back}{Back}{Back}{Back}{Back}{Back}" в первый надпись рядом с "Фамилия:" надпись
            Keyboard.SendKeys(uIItemEdit, this.BtnDoneNoCompleteDataRecordedMethod1Params.UIItemEditSendKeys, ModifierKeys.None);

            // Тип "Имя" в первый надпись рядом с "Имя:" надпись
            uIItemEdit1.Text = this.BtnDoneNoCompleteDataRecordedMethod1Params.UIItemEditText2;

            // Щелкните "Готово" кнопка
            Mouse.Click(uIГотовоButton, new Point(19, 24));

            // Тип "" в первый надпись рядом с "Имя:" надпись
            uIItemEdit1.Text = this.BtnDoneNoCompleteDataRecordedMethod1Params.UIItemEditText3;

            // Тип "{Back}{Back}{Back}{Back}{Back}" в первый надпись рядом с "Имя:" надпись
            Keyboard.SendKeys(uIItemEdit1, this.BtnDoneNoCompleteDataRecordedMethod1Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Тип "1234" в первый надпись рядом с "Группа:" надпись
            uIItemEdit2.Text = this.BtnDoneNoCompleteDataRecordedMethod1Params.UIItemEditText4;

            // Щелкните "Готово" кнопка
            Mouse.Click(uIГотовоButton, new Point(32, 27));
        }
        
        /// <summary>
        /// TranzitInfoFormRecordedMethod1 - Используйте "TranzitInfoFormRecordedMethod1Params" для передачи параметров в этот метод.
        /// </summary>
        public void TranzitInfoFormRecordedMethod1()
        {
            #region Variable Declarations
            WpfButton uIOKButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom12.UIOKButton;
            WpfEdit uIItemEdit = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIФамилияText.UIItemEdit;
            WpfEdit uIItemEdit1 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIИмяText.UIItemEdit;
            WpfEdit uIItemEdit2 = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГруппаText.UIItemEdit;
            WpfButton uIГотовоButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom13.UIГотовоButton;
            #endregion

            // Щелкните "OK" кнопка
            Mouse.Click(uIOKButton, new Point(44, 17));

            // Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
            uIItemEdit.Text = this.TranzitInfoFormRecordedMethod1Params.UIItemEditText;

            // Тип "Имя" в первый надпись рядом с "Имя:" надпись
            uIItemEdit1.Text = this.TranzitInfoFormRecordedMethod1Params.UIItemEditText1;

            // Тип "1111" в первый надпись рядом с "Группа:" надпись
            uIItemEdit2.Text = this.TranzitInfoFormRecordedMethod1Params.UIItemEditText2;

            // Щелкните "Готово" кнопка
            Mouse.Click(uIГотовоButton, new Point(41, 26));
        }
        
        /// <summary>
        /// BtnBeginActiveAssertMethod2 - Используйте "BtnBeginActiveAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void BtnBeginActiveAssertMethod2()
        {
            #region Variable Declarations
            WpfButton uIНачатьтестButton = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom14.UIНачатьтестButton;
            #endregion

            // Убедитесь, что свойство Exists "Начать тест" кнопка равняется "True"
            Assert.AreEqual(this.BtnBeginActiveAssertMethod2ExpectedValues.UIНачатьтестButtonExists, uIНачатьтестButton.Exists, "Отсутствует кнопка Начать");

            // Убедитесь, что свойство Enabled "Начать тест" кнопка равняется "True"
            Assert.AreEqual(this.BtnBeginActiveAssertMethod2ExpectedValues.UIНачатьтестButtonEnabled, uIНачатьтестButton.Enabled);

            // Убедитесь, что свойство Exists "Начать тест" кнопка равняется "True"
            Assert.AreEqual(this.BtnBeginActiveAssertMethod2ExpectedValues.UIНачатьтестButtonExists1, uIНачатьтестButton.Exists, "Отсутствует кнопка Начать");

            // Убедитесь, что свойство Enabled "Начать тест" кнопка равняется "True"
            Assert.AreEqual(this.BtnBeginActiveAssertMethod2ExpectedValues.UIНачатьтестButtonEnabled1, uIНачатьтестButton.Enabled, "Не доступна кнопка Начать");
        }
        
        /// <summary>
        /// ExistInfoFieldsAssertMethod2 - Используйте "ExistInfoFieldsAssertMethod2ExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ExistInfoFieldsAssertMethod2()
        {
            #region Variable Declarations
            WpfText uIItem000100Text = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom14.UIItem000100Text;
            WpfText uIВремятестированияText = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom14.UIВремятестированияText;
            WpfText uIItem6Text = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom14.UIItem6Text;
            WpfText uIКоличествовопросовText = this.UIСетевыеинформационныWindow1.UIItemCustom.UIItemCustom14.UIКоличествовопросовText;
            #endregion

            // Убедитесь, что свойство Exists "00:01:00" надпись равняется "True"
            Assert.AreEqual(this.ExistInfoFieldsAssertMethod2ExpectedValues.UIItem000100TextExists, uIItem000100Text.Exists, "Нет значения времени ");

            // Убедитесь, что свойство Exists "Время тестирования:" надпись равняется "True"
            Assert.AreEqual(this.ExistInfoFieldsAssertMethod2ExpectedValues.UIВремятестированияTextExists, uIВремятестированияText.Exists, "Нет информации о времени ");

            // Убедитесь, что свойство Exists "6" надпись равняется "True"
            Assert.AreEqual(this.ExistInfoFieldsAssertMethod2ExpectedValues.UIItem6TextExists, uIItem6Text.Exists, "Нет значения количества вопросов");

            // Убедитесь, что свойство Exists "Количество вопросов:" надпись равняется "True"
            Assert.AreEqual(this.ExistInfoFieldsAssertMethod2ExpectedValues.UIКоличествовопросовTextExists, uIКоличествовопросовText.Exists, "Нет поля Количество вопросов");
        }
        
        #region Properties
        public virtual AddNewQuestionRecordedMethodParams AddNewQuestionRecordedMethodParams
        {
            get
            {
                if ((this.mAddNewQuestionRecordedMethodParams == null))
                {
                    this.mAddNewQuestionRecordedMethodParams = new AddNewQuestionRecordedMethodParams();
                }
                return this.mAddNewQuestionRecordedMethodParams;
            }
        }
        
        public virtual ResultAddQuestionEqualMethodExpectedValues ResultAddQuestionEqualMethodExpectedValues
        {
            get
            {
                if ((this.mResultAddQuestionEqualMethodExpectedValues == null))
                {
                    this.mResultAddQuestionEqualMethodExpectedValues = new ResultAddQuestionEqualMethodExpectedValues();
                }
                return this.mResultAddQuestionEqualMethodExpectedValues;
            }
        }
        
        public virtual AboutAssertMethodExpectedValues AboutAssertMethodExpectedValues
        {
            get
            {
                if ((this.mAboutAssertMethodExpectedValues == null))
                {
                    this.mAboutAssertMethodExpectedValues = new AboutAssertMethodExpectedValues();
                }
                return this.mAboutAssertMethodExpectedValues;
            }
        }
        
        public virtual TestDisciplineNameCheckExpectedValues TestDisciplineNameCheckExpectedValues
        {
            get
            {
                if ((this.mTestDisciplineNameCheckExpectedValues == null))
                {
                    this.mTestDisciplineNameCheckExpectedValues = new TestDisciplineNameCheckExpectedValues();
                }
                return this.mTestDisciplineNameCheckExpectedValues;
            }
        }
        
        public virtual EditTestButtonExistMethodExpectedValues EditTestButtonExistMethodExpectedValues
        {
            get
            {
                if ((this.mEditTestButtonExistMethodExpectedValues == null))
                {
                    this.mEditTestButtonExistMethodExpectedValues = new EditTestButtonExistMethodExpectedValues();
                }
                return this.mEditTestButtonExistMethodExpectedValues;
            }
        }
        
        public virtual ResultButtonAssertMethodExpectedValues ResultButtonAssertMethodExpectedValues
        {
            get
            {
                if ((this.mResultButtonAssertMethodExpectedValues == null))
                {
                    this.mResultButtonAssertMethodExpectedValues = new ResultButtonAssertMethodExpectedValues();
                }
                return this.mResultButtonAssertMethodExpectedValues;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual StatusBarAssertMethodExpectedValues StatusBarAssertMethodExpectedValues
        {
            get
            {
                if ((this.mStatusBarAssertMethodExpectedValues == null))
                {
                    this.mStatusBarAssertMethodExpectedValues = new StatusBarAssertMethodExpectedValues();
                }
                return this.mStatusBarAssertMethodExpectedValues;
            }
        }
        
        public virtual AddEditBtnAssertMethodExpectedValues AddEditBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mAddEditBtnAssertMethodExpectedValues == null))
                {
                    this.mAddEditBtnAssertMethodExpectedValues = new AddEditBtnAssertMethodExpectedValues();
                }
                return this.mAddEditBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual TestParamAssertMethodExpectedValues TestParamAssertMethodExpectedValues
        {
            get
            {
                if ((this.mTestParamAssertMethodExpectedValues == null))
                {
                    this.mTestParamAssertMethodExpectedValues = new TestParamAssertMethodExpectedValues();
                }
                return this.mTestParamAssertMethodExpectedValues;
            }
        }
        
        public virtual BackBtnAssertMethodExpectedValues BackBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mBackBtnAssertMethodExpectedValues == null))
                {
                    this.mBackBtnAssertMethodExpectedValues = new BackBtnAssertMethodExpectedValues();
                }
                return this.mBackBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual EditBtnAssertMethodExpectedValues EditBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mEditBtnAssertMethodExpectedValues == null))
                {
                    this.mEditBtnAssertMethodExpectedValues = new EditBtnAssertMethodExpectedValues();
                }
                return this.mEditBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual DeleteBtnAssertMethodExpectedValues DeleteBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mDeleteBtnAssertMethodExpectedValues == null))
                {
                    this.mDeleteBtnAssertMethodExpectedValues = new DeleteBtnAssertMethodExpectedValues();
                }
                return this.mDeleteBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual NewBtnAssertMethodExpectedValues NewBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mNewBtnAssertMethodExpectedValues == null))
                {
                    this.mNewBtnAssertMethodExpectedValues = new NewBtnAssertMethodExpectedValues();
                }
                return this.mNewBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual BackBtnAddEditAssertMethodExpectedValues BackBtnAddEditAssertMethodExpectedValues
        {
            get
            {
                if ((this.mBackBtnAddEditAssertMethodExpectedValues == null))
                {
                    this.mBackBtnAddEditAssertMethodExpectedValues = new BackBtnAddEditAssertMethodExpectedValues();
                }
                return this.mBackBtnAddEditAssertMethodExpectedValues;
            }
        }
        
        public virtual EditButtonEnabledAssertMethodExpectedValues EditButtonEnabledAssertMethodExpectedValues
        {
            get
            {
                if ((this.mEditButtonEnabledAssertMethodExpectedValues == null))
                {
                    this.mEditButtonEnabledAssertMethodExpectedValues = new EditButtonEnabledAssertMethodExpectedValues();
                }
                return this.mEditButtonEnabledAssertMethodExpectedValues;
            }
        }
        
        public virtual DeleteBtnEnabledAssertMethodExpectedValues DeleteBtnEnabledAssertMethodExpectedValues
        {
            get
            {
                if ((this.mDeleteBtnEnabledAssertMethodExpectedValues == null))
                {
                    this.mDeleteBtnEnabledAssertMethodExpectedValues = new DeleteBtnEnabledAssertMethodExpectedValues();
                }
                return this.mDeleteBtnEnabledAssertMethodExpectedValues;
            }
        }
        
        public virtual QuestionItemSelectRecordedMethodParams QuestionItemSelectRecordedMethodParams
        {
            get
            {
                if ((this.mQuestionItemSelectRecordedMethodParams == null))
                {
                    this.mQuestionItemSelectRecordedMethodParams = new QuestionItemSelectRecordedMethodParams();
                }
                return this.mQuestionItemSelectRecordedMethodParams;
            }
        }
        
        public virtual EditBtnQuestionSelectedEnableAssertMethodExpectedValues EditBtnQuestionSelectedEnableAssertMethodExpectedValues
        {
            get
            {
                if ((this.mEditBtnQuestionSelectedEnableAssertMethodExpectedValues == null))
                {
                    this.mEditBtnQuestionSelectedEnableAssertMethodExpectedValues = new EditBtnQuestionSelectedEnableAssertMethodExpectedValues();
                }
                return this.mEditBtnQuestionSelectedEnableAssertMethodExpectedValues;
            }
        }
        
        public virtual DeleteBtnQuestionSelectedEnableAssertMethodExpectedValues DeleteBtnQuestionSelectedEnableAssertMethodExpectedValues
        {
            get
            {
                if ((this.mDeleteBtnQuestionSelectedEnableAssertMethodExpectedValues == null))
                {
                    this.mDeleteBtnQuestionSelectedEnableAssertMethodExpectedValues = new DeleteBtnQuestionSelectedEnableAssertMethodExpectedValues();
                }
                return this.mDeleteBtnQuestionSelectedEnableAssertMethodExpectedValues;
            }
        }
        
        public virtual QuestionNameTextFieldAssertMethodExpectedValues QuestionNameTextFieldAssertMethodExpectedValues
        {
            get
            {
                if ((this.mQuestionNameTextFieldAssertMethodExpectedValues == null))
                {
                    this.mQuestionNameTextFieldAssertMethodExpectedValues = new QuestionNameTextFieldAssertMethodExpectedValues();
                }
                return this.mQuestionNameTextFieldAssertMethodExpectedValues;
            }
        }
        
        public virtual AnswerFiledAssertMethodExpectedValues AnswerFiledAssertMethodExpectedValues
        {
            get
            {
                if ((this.mAnswerFiledAssertMethodExpectedValues == null))
                {
                    this.mAnswerFiledAssertMethodExpectedValues = new AnswerFiledAssertMethodExpectedValues();
                }
                return this.mAnswerFiledAssertMethodExpectedValues;
            }
        }
        
        public virtual AddAnswerBtnExistEnableAssertMethodExpectedValues AddAnswerBtnExistEnableAssertMethodExpectedValues
        {
            get
            {
                if ((this.mAddAnswerBtnExistEnableAssertMethodExpectedValues == null))
                {
                    this.mAddAnswerBtnExistEnableAssertMethodExpectedValues = new AddAnswerBtnExistEnableAssertMethodExpectedValues();
                }
                return this.mAddAnswerBtnExistEnableAssertMethodExpectedValues;
            }
        }
        
        public virtual AnswerDeleteBtnExistEnabledAssertMethodExpectedValues AnswerDeleteBtnExistEnabledAssertMethodExpectedValues
        {
            get
            {
                if ((this.mAnswerDeleteBtnExistEnabledAssertMethodExpectedValues == null))
                {
                    this.mAnswerDeleteBtnExistEnabledAssertMethodExpectedValues = new AnswerDeleteBtnExistEnabledAssertMethodExpectedValues();
                }
                return this.mAnswerDeleteBtnExistEnabledAssertMethodExpectedValues;
            }
        }
        
        public virtual NewQuestionOkBtnExistAssertMethodExpectedValues NewQuestionOkBtnExistAssertMethodExpectedValues
        {
            get
            {
                if ((this.mNewQuestionOkBtnExistAssertMethodExpectedValues == null))
                {
                    this.mNewQuestionOkBtnExistAssertMethodExpectedValues = new NewQuestionOkBtnExistAssertMethodExpectedValues();
                }
                return this.mNewQuestionOkBtnExistAssertMethodExpectedValues;
            }
        }
        
        public virtual NewQuestionCancelBtnExistAssertMethodExpectedValues NewQuestionCancelBtnExistAssertMethodExpectedValues
        {
            get
            {
                if ((this.mNewQuestionCancelBtnExistAssertMethodExpectedValues == null))
                {
                    this.mNewQuestionCancelBtnExistAssertMethodExpectedValues = new NewQuestionCancelBtnExistAssertMethodExpectedValues();
                }
                return this.mNewQuestionCancelBtnExistAssertMethodExpectedValues;
            }
        }
        
        public virtual BtnOKExistAssertMethod2ExpectedValues BtnOKExistAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mBtnOKExistAssertMethod2ExpectedValues == null))
                {
                    this.mBtnOKExistAssertMethod2ExpectedValues = new BtnOKExistAssertMethod2ExpectedValues();
                }
                return this.mBtnOKExistAssertMethod2ExpectedValues;
            }
        }
        
        public virtual NameTestStudAppAssertMethod2ExpectedValues NameTestStudAppAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mNameTestStudAppAssertMethod2ExpectedValues == null))
                {
                    this.mNameTestStudAppAssertMethod2ExpectedValues = new NameTestStudAppAssertMethod2ExpectedValues();
                }
                return this.mNameTestStudAppAssertMethod2ExpectedValues;
            }
        }
        
        public virtual NameFormAssertMethod2ExpectedValues NameFormAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mNameFormAssertMethod2ExpectedValues == null))
                {
                    this.mNameFormAssertMethod2ExpectedValues = new NameFormAssertMethod2ExpectedValues();
                }
                return this.mNameFormAssertMethod2ExpectedValues;
            }
        }
        
        public virtual TitleNameStudAppAssertMethod2ExpectedValues TitleNameStudAppAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mTitleNameStudAppAssertMethod2ExpectedValues == null))
                {
                    this.mTitleNameStudAppAssertMethod2ExpectedValues = new TitleNameStudAppAssertMethod2ExpectedValues();
                }
                return this.mTitleNameStudAppAssertMethod2ExpectedValues;
            }
        }
        
        public virtual BtnDoneNoActiveAssertMethod2ExpectedValues BtnDoneNoActiveAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mBtnDoneNoActiveAssertMethod2ExpectedValues == null))
                {
                    this.mBtnDoneNoActiveAssertMethod2ExpectedValues = new BtnDoneNoActiveAssertMethod2ExpectedValues();
                }
                return this.mBtnDoneNoActiveAssertMethod2ExpectedValues;
            }
        }
        
        public virtual TestBtnDoneRecordedMethod1Params TestBtnDoneRecordedMethod1Params
        {
            get
            {
                if ((this.mTestBtnDoneRecordedMethod1Params == null))
                {
                    this.mTestBtnDoneRecordedMethod1Params = new TestBtnDoneRecordedMethod1Params();
                }
                return this.mTestBtnDoneRecordedMethod1Params;
            }
        }
        
        public virtual BtnDoneNoCompleteDataAssertMethod2ExpectedValues BtnDoneNoCompleteDataAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mBtnDoneNoCompleteDataAssertMethod2ExpectedValues == null))
                {
                    this.mBtnDoneNoCompleteDataAssertMethod2ExpectedValues = new BtnDoneNoCompleteDataAssertMethod2ExpectedValues();
                }
                return this.mBtnDoneNoCompleteDataAssertMethod2ExpectedValues;
            }
        }
        
        public virtual BtnDoneFullCompleteRecordedMethod1Params BtnDoneFullCompleteRecordedMethod1Params
        {
            get
            {
                if ((this.mBtnDoneFullCompleteRecordedMethod1Params == null))
                {
                    this.mBtnDoneFullCompleteRecordedMethod1Params = new BtnDoneFullCompleteRecordedMethod1Params();
                }
                return this.mBtnDoneFullCompleteRecordedMethod1Params;
            }
        }
        
        public virtual BtnDoneFullCompleteAssertMethod2ExpectedValues BtnDoneFullCompleteAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mBtnDoneFullCompleteAssertMethod2ExpectedValues == null))
                {
                    this.mBtnDoneFullCompleteAssertMethod2ExpectedValues = new BtnDoneFullCompleteAssertMethod2ExpectedValues();
                }
                return this.mBtnDoneFullCompleteAssertMethod2ExpectedValues;
            }
        }
        
        public virtual BtnDoneNoCompleteDataRecordedMethod1Params BtnDoneNoCompleteDataRecordedMethod1Params
        {
            get
            {
                if ((this.mBtnDoneNoCompleteDataRecordedMethod1Params == null))
                {
                    this.mBtnDoneNoCompleteDataRecordedMethod1Params = new BtnDoneNoCompleteDataRecordedMethod1Params();
                }
                return this.mBtnDoneNoCompleteDataRecordedMethod1Params;
            }
        }
        
        public virtual TranzitInfoFormRecordedMethod1Params TranzitInfoFormRecordedMethod1Params
        {
            get
            {
                if ((this.mTranzitInfoFormRecordedMethod1Params == null))
                {
                    this.mTranzitInfoFormRecordedMethod1Params = new TranzitInfoFormRecordedMethod1Params();
                }
                return this.mTranzitInfoFormRecordedMethod1Params;
            }
        }
        
        public virtual BtnBeginActiveAssertMethod2ExpectedValues BtnBeginActiveAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mBtnBeginActiveAssertMethod2ExpectedValues == null))
                {
                    this.mBtnBeginActiveAssertMethod2ExpectedValues = new BtnBeginActiveAssertMethod2ExpectedValues();
                }
                return this.mBtnBeginActiveAssertMethod2ExpectedValues;
            }
        }
        
        public virtual ExistInfoFieldsAssertMethod2ExpectedValues ExistInfoFieldsAssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mExistInfoFieldsAssertMethod2ExpectedValues == null))
                {
                    this.mExistInfoFieldsAssertMethod2ExpectedValues = new ExistInfoFieldsAssertMethod2ExpectedValues();
                }
                return this.mExistInfoFieldsAssertMethod2ExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIСетевыеинформационныWindow UIСетевыеинформационныWindow
        {
            get
            {
                if ((this.mUIСетевыеинформационныWindow == null))
                {
                    this.mUIСетевыеинформационныWindow = new UIСетевыеинформационныWindow();
                }
                return this.mUIСетевыеинформационныWindow;
            }
        }
        
        public UIСетевыеинформационныWindow1 UIСетевыеинформационныWindow1
        {
            get
            {
                if ((this.mUIСетевыеинформационныWindow1 == null))
                {
                    this.mUIСетевыеинформационныWindow1 = new UIСетевыеинформационныWindow1();
                }
                return this.mUIСетевыеинформационныWindow1;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UICodedUIWindow UICodedUIWindow
        {
            get
            {
                if ((this.mUICodedUIWindow == null))
                {
                    this.mUICodedUIWindow = new UICodedUIWindow();
                }
                return this.mUICodedUIWindow;
            }
        }
        
        public UIStudentAppWindow UIStudentAppWindow
        {
            get
            {
                if ((this.mUIStudentAppWindow == null))
                {
                    this.mUIStudentAppWindow = new UIStudentAppWindow();
                }
                return this.mUIStudentAppWindow;
            }
        }
        
        public UICodedUIStudentAppWindow UICodedUIStudentAppWindow
        {
            get
            {
                if ((this.mUICodedUIStudentAppWindow == null))
                {
                    this.mUICodedUIStudentAppWindow = new UICodedUIStudentAppWindow();
                }
                return this.mUICodedUIStudentAppWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddNewQuestionRecordedMethodParams mAddNewQuestionRecordedMethodParams;
        
        private ResultAddQuestionEqualMethodExpectedValues mResultAddQuestionEqualMethodExpectedValues;
        
        private AboutAssertMethodExpectedValues mAboutAssertMethodExpectedValues;
        
        private TestDisciplineNameCheckExpectedValues mTestDisciplineNameCheckExpectedValues;
        
        private EditTestButtonExistMethodExpectedValues mEditTestButtonExistMethodExpectedValues;
        
        private ResultButtonAssertMethodExpectedValues mResultButtonAssertMethodExpectedValues;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private StatusBarAssertMethodExpectedValues mStatusBarAssertMethodExpectedValues;
        
        private AddEditBtnAssertMethodExpectedValues mAddEditBtnAssertMethodExpectedValues;
        
        private TestParamAssertMethodExpectedValues mTestParamAssertMethodExpectedValues;
        
        private BackBtnAssertMethodExpectedValues mBackBtnAssertMethodExpectedValues;
        
        private EditBtnAssertMethodExpectedValues mEditBtnAssertMethodExpectedValues;
        
        private DeleteBtnAssertMethodExpectedValues mDeleteBtnAssertMethodExpectedValues;
        
        private NewBtnAssertMethodExpectedValues mNewBtnAssertMethodExpectedValues;
        
        private BackBtnAddEditAssertMethodExpectedValues mBackBtnAddEditAssertMethodExpectedValues;
        
        private EditButtonEnabledAssertMethodExpectedValues mEditButtonEnabledAssertMethodExpectedValues;
        
        private DeleteBtnEnabledAssertMethodExpectedValues mDeleteBtnEnabledAssertMethodExpectedValues;
        
        private QuestionItemSelectRecordedMethodParams mQuestionItemSelectRecordedMethodParams;
        
        private EditBtnQuestionSelectedEnableAssertMethodExpectedValues mEditBtnQuestionSelectedEnableAssertMethodExpectedValues;
        
        private DeleteBtnQuestionSelectedEnableAssertMethodExpectedValues mDeleteBtnQuestionSelectedEnableAssertMethodExpectedValues;
        
        private QuestionNameTextFieldAssertMethodExpectedValues mQuestionNameTextFieldAssertMethodExpectedValues;
        
        private AnswerFiledAssertMethodExpectedValues mAnswerFiledAssertMethodExpectedValues;
        
        private AddAnswerBtnExistEnableAssertMethodExpectedValues mAddAnswerBtnExistEnableAssertMethodExpectedValues;
        
        private AnswerDeleteBtnExistEnabledAssertMethodExpectedValues mAnswerDeleteBtnExistEnabledAssertMethodExpectedValues;
        
        private NewQuestionOkBtnExistAssertMethodExpectedValues mNewQuestionOkBtnExistAssertMethodExpectedValues;
        
        private NewQuestionCancelBtnExistAssertMethodExpectedValues mNewQuestionCancelBtnExistAssertMethodExpectedValues;
        
        private BtnOKExistAssertMethod2ExpectedValues mBtnOKExistAssertMethod2ExpectedValues;
        
        private NameTestStudAppAssertMethod2ExpectedValues mNameTestStudAppAssertMethod2ExpectedValues;
        
        private NameFormAssertMethod2ExpectedValues mNameFormAssertMethod2ExpectedValues;
        
        private TitleNameStudAppAssertMethod2ExpectedValues mTitleNameStudAppAssertMethod2ExpectedValues;
        
        private BtnDoneNoActiveAssertMethod2ExpectedValues mBtnDoneNoActiveAssertMethod2ExpectedValues;
        
        private TestBtnDoneRecordedMethod1Params mTestBtnDoneRecordedMethod1Params;
        
        private BtnDoneNoCompleteDataAssertMethod2ExpectedValues mBtnDoneNoCompleteDataAssertMethod2ExpectedValues;
        
        private BtnDoneFullCompleteRecordedMethod1Params mBtnDoneFullCompleteRecordedMethod1Params;
        
        private BtnDoneFullCompleteAssertMethod2ExpectedValues mBtnDoneFullCompleteAssertMethod2ExpectedValues;
        
        private BtnDoneNoCompleteDataRecordedMethod1Params mBtnDoneNoCompleteDataRecordedMethod1Params;
        
        private TranzitInfoFormRecordedMethod1Params mTranzitInfoFormRecordedMethod1Params;
        
        private BtnBeginActiveAssertMethod2ExpectedValues mBtnBeginActiveAssertMethod2ExpectedValues;
        
        private ExistInfoFieldsAssertMethod2ExpectedValues mExistInfoFieldsAssertMethod2ExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIСетевыеинформационныWindow mUIСетевыеинформационныWindow;
        
        private UIСетевыеинформационныWindow1 mUIСетевыеинформационныWindow1;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UICodedUIWindow mUICodedUIWindow;
        
        private UIStudentAppWindow mUIStudentAppWindow;
        
        private UICodedUIStudentAppWindow mUICodedUIStudentAppWindow;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AddNewQuestionRecordedMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AddNewQuestionRecordedMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Ввести "TestQuestion1" в надпись
        /// </summary>
        public string UIItemEditText = "TestQuestion1";
        
        /// <summary>
        /// Ввести "Case 1" в надпись
        /// </summary>
        public string UIItemEditText1 = "Case 1";
        
        /// <summary>
        /// Ввести "Case 2" в надпись
        /// </summary>
        public string UIItemEditText2 = "Case 2";
        
        /// <summary>
        /// Ввести "Case 3" в надпись
        /// </summary>
        public string UIItemEditText3 = "Case 3";
        
        /// <summary>
        /// Выбрать флажок
        /// </summary>
        public bool UIItemCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultAddQuestionEqualMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultAddQuestionEqualMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство ControlType "WCFServiceLibrary.Question" элемент списка равняется "ListItem"
        /// </summary>
        public string UIWCFServiceLibraryQueListItemControlType = "ListItem";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AboutAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AboutAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "О программе" кнопка равняется "О программе"
        /// </summary>
        public string UIОпрограммеButtonDisplayText = "О программе";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TestDisciplineNameCheck"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class TestDisciplineNameCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "''Сетевые информационные технологии''" надпись равняется "''Сетевые информационные технологии'' "
        /// </summary>
        public string UIСетевыеинформационныTextDisplayText = "\'\'Сетевые информационные технологии\'\' ";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "EditTestButtonExistMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class EditTestButtonExistMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Редактировать тест" кнопка равняется "True"
        /// </summary>
        public bool UIРедактироватьтестButton1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultButtonAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultButtonAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Результаты" кнопка равняется "True"
        /// </summary>
        public bool UIРезультатыButton1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertMethod1"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "О программе" кнопка равняется "True"
        /// </summary>
        public bool UIОпрограммеButton1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "StatusBarAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class StatusBarAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Сервис для тестирования доступен!" надпись равняется "True"
        /// </summary>
        public bool UIСервисдлятестированиTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AddEditBtnAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AddEditBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Редактировать/добавить" кнопка равняется "True"
        /// </summary>
        public bool UIРедактироватьдобавитButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TestParamAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class TestParamAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Задать параметры теста" кнопка равняется "True"
        /// </summary>
        public bool UIЗадатьпараметрытестаButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BackBtnAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BackBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Назад" кнопка равняется "True"
        /// </summary>
        public bool UIНазадButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "EditBtnAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class EditBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Редактировать" кнопка равняется "True"
        /// </summary>
        public bool UIРедактироватьButtonExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Редактировать" кнопка равняется "False"
        /// </summary>
        public bool UIРедактироватьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "DeleteBtnAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class DeleteBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Удалить" кнопка равняется "True"
        /// </summary>
        public bool UIУдалитьButtonExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Удалить" кнопка равняется "False"
        /// </summary>
        public bool UIУдалитьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "NewBtnAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class NewBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Добавить новый" кнопка равняется "True"
        /// </summary>
        public bool UIДобавитьновыйButton1Exists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Добавить новый" кнопка равняется "True"
        /// </summary>
        public bool UIДобавитьновыйButton1Enabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BackBtnAddEditAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BackBtnAddEditAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Назад" кнопка равняется "True"
        /// </summary>
        public bool UIНазадButtonExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Назад" кнопка равняется "True"
        /// </summary>
        public bool UIНазадButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "EditButtonEnabledAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class EditButtonEnabledAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Редактировать" кнопка равняется "False"
        /// </summary>
        public bool UIРедактироватьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "DeleteBtnEnabledAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class DeleteBtnEnabledAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Удалить" кнопка равняется "False"
        /// </summary>
        public bool UIУдалитьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "QuestionItemSelectRecordedMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class QuestionItemSelectRecordedMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Выберите "WCFServiceLibrary.Question" в первый список рядом с "Список вопросов:" надпись
        /// </summary>
        public string UIItemListSelectedItemsAsString = "WCFServiceLibrary.Question";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "EditBtnQuestionSelectedEnableAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class EditBtnQuestionSelectedEnableAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Редактировать" кнопка равняется "True"
        /// </summary>
        public bool UIРедактироватьButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "DeleteBtnQuestionSelectedEnableAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class DeleteBtnQuestionSelectedEnableAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Удалить" кнопка равняется "True"
        /// </summary>
        public bool UIУдалитьButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "QuestionNameTextFieldAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class QuestionNameTextFieldAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists надпись равняется "True"
        /// </summary>
        public bool UIItemEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AnswerFiledAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AnswerFiledAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists список равняется "True"
        /// </summary>
        public bool UIItemListExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AddAnswerBtnExistEnableAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AddAnswerBtnExistEnableAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Добавить" кнопка равняется "True"
        /// </summary>
        public bool UIДобавитьButtonExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Добавить" кнопка равняется "True"
        /// </summary>
        public bool UIДобавитьButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AnswerDeleteBtnExistEnabledAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class AnswerDeleteBtnExistEnabledAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Удалить" кнопка равняется "True"
        /// </summary>
        public bool UIУдалитьButtonExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Удалить" кнопка равняется "False"
        /// </summary>
        public bool UIУдалитьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "NewQuestionOkBtnExistAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class NewQuestionOkBtnExistAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Готово" кнопка равняется "True"
        /// </summary>
        public bool UIГотовоButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "NewQuestionCancelBtnExistAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class NewQuestionCancelBtnExistAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Отмена" кнопка равняется "True"
        /// </summary>
        public bool UIОтменаButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BtnOKExistAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BtnOKExistAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "OK" кнопка равняется "True"
        /// </summary>
        public bool UIOKButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "NameTestStudAppAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class NameTestStudAppAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "Сети" надпись равняется "Сетевыеинформационные технологии"
        /// </summary>
        public string UIСетиTextDisplayText = "Сетевыеинформационные технологии";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "NameFormAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class NameFormAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "Регистрация" надпись равняется " Регистрация"
        /// </summary>
        public string UIРегистрацияTextDisplayText = " Регистрация";
        
        /// <summary>
        /// Убедитесь, что свойство Exists "Регистрация" надпись равняется "True"
        /// </summary>
        public bool UIРегистрацияTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TitleNameStudAppAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class TitleNameStudAppAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "Тестирование по дисциплине:" надпись равняется "Тестирование по дисциплине:"
        /// </summary>
        public string UIТестированиеподисципTextDisplayText = "Тестирование по дисциплине:";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BtnDoneNoActiveAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BtnDoneNoActiveAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Готово" кнопка равняется "True"
        /// </summary>
        public bool UIГотовоButtonExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Готово" кнопка равняется "False"
        /// </summary>
        public bool UIГотовоButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TestBtnDoneRecordedMethod1"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class TestBtnDoneRecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
        /// </summary>
        public string UIItemEditText = "Фамилия";
        
        /// <summary>
        /// Тип "Имя" в первый надпись рядом с "Имя:" надпись
        /// </summary>
        public string UIItemEditText1 = "Имя";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BtnDoneNoCompleteDataAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BtnDoneNoCompleteDataAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text первый надпись рядом с "Фамилия:" надпись равняется "Фамилия"
        /// </summary>
        public string UIItemEditText = "Фамилия";
        
        /// <summary>
        /// Убедитесь, что свойство Text первый надпись рядом с "Имя:" надпись равняется "Имя"
        /// </summary>
        public string UIItemEditText1 = "Имя";
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Готово" кнопка равняется "False"
        /// </summary>
        public bool UIГотовоButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BtnDoneFullCompleteRecordedMethod1"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BtnDoneFullCompleteRecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
        /// </summary>
        public string UIItemEditText = "Фамилия";
        
        /// <summary>
        /// Тип "Имя" в первый надпись рядом с "Имя:" надпись
        /// </summary>
        public string UIItemEditText1 = "Имя";
        
        /// <summary>
        /// Тип "1234" в первый надпись рядом с "Группа:" надпись
        /// </summary>
        public string UIItemEditText2 = "1234";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BtnDoneFullCompleteAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BtnDoneFullCompleteAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Text первый надпись рядом с "Фамилия:" надпись равняется "Фамилия"
        /// </summary>
        public string UIItemEditText = "Фамилия";
        
        /// <summary>
        /// Убедитесь, что свойство Text первый надпись рядом с "Имя:" надпись равняется "Имя"
        /// </summary>
        public string UIItemEditText1 = "Имя";
        
        /// <summary>
        /// Убедитесь, что свойство Text первый надпись рядом с "Имя:" надпись равняется "Имя"
        /// </summary>
        public string UIItemEditText2 = "Имя";
        
        /// <summary>
        /// Убедитесь, что свойство Text первый надпись рядом с "Группа:" надпись равняется "1234"
        /// </summary>
        public string UIItemEditText3 = "1234";
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Готово" кнопка равняется "True"
        /// </summary>
        public bool UIГотовоButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BtnDoneNoCompleteDataRecordedMethod1"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BtnDoneNoCompleteDataRecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
        /// </summary>
        public string UIItemEditText = "Фамилия";
        
        /// <summary>
        /// Тип "" в первый надпись рядом с "Фамилия:" надпись
        /// </summary>
        public string UIItemEditText1 = "";
        
        /// <summary>
        /// Тип "{Back}{Back}{Back}{Back}{Back}{Back}" в первый надпись рядом с "Фамилия:" надпись
        /// </summary>
        public string UIItemEditSendKeys = "{Back}{Back}{Back}{Back}{Back}{Back}";
        
        /// <summary>
        /// Тип "Имя" в первый надпись рядом с "Имя:" надпись
        /// </summary>
        public string UIItemEditText2 = "Имя";
        
        /// <summary>
        /// Тип "" в первый надпись рядом с "Имя:" надпись
        /// </summary>
        public string UIItemEditText3 = "";
        
        /// <summary>
        /// Тип "{Back}{Back}{Back}{Back}{Back}" в первый надпись рядом с "Имя:" надпись
        /// </summary>
        public string UIItemEditSendKeys1 = "{Back}{Back}{Back}{Back}{Back}";
        
        /// <summary>
        /// Тип "1234" в первый надпись рядом с "Группа:" надпись
        /// </summary>
        public string UIItemEditText4 = "1234";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "TranzitInfoFormRecordedMethod1"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class TranzitInfoFormRecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Тип "Фамилия" в первый надпись рядом с "Фамилия:" надпись
        /// </summary>
        public string UIItemEditText = "Фамилия";
        
        /// <summary>
        /// Тип "Имя" в первый надпись рядом с "Имя:" надпись
        /// </summary>
        public string UIItemEditText1 = "Имя";
        
        /// <summary>
        /// Тип "1111" в первый надпись рядом с "Группа:" надпись
        /// </summary>
        public string UIItemEditText2 = "1111";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "BtnBeginActiveAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class BtnBeginActiveAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "Начать тест" кнопка равняется "True"
        /// </summary>
        public bool UIНачатьтестButtonExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Начать тест" кнопка равняется "True"
        /// </summary>
        public bool UIНачатьтестButtonEnabled = true;
        
        /// <summary>
        /// Убедитесь, что свойство Exists "Начать тест" кнопка равняется "True"
        /// </summary>
        public bool UIНачатьтестButtonExists1 = true;
        
        /// <summary>
        /// Убедитесь, что свойство Enabled "Начать тест" кнопка равняется "True"
        /// </summary>
        public bool UIНачатьтестButtonEnabled1 = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ExistInfoFieldsAssertMethod2"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ExistInfoFieldsAssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Exists "00:01:00" надпись равняется "True"
        /// </summary>
        public bool UIItem000100TextExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Exists "Время тестирования:" надпись равняется "True"
        /// </summary>
        public bool UIВремятестированияTextExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Exists "6" надпись равняется "True"
        /// </summary>
        public bool UIItem6TextExists = true;
        
        /// <summary>
        /// Убедитесь, что свойство Exists "Количество вопросов:" надпись равняется "True"
        /// </summary>
        public bool UIКоличествовопросовTextExists = true;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UITeacherAppexeListItem UITeacherAppexeListItem
        {
            get
            {
                if ((this.mUITeacherAppexeListItem == null))
                {
                    this.mUITeacherAppexeListItem = new UITeacherAppexeListItem(this);
                }
                return this.mUITeacherAppexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITeacherAppexeListItem mUITeacherAppexeListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITeacherAppexeListItem : WinListItem
    {
        
        public UITeacherAppexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "TeacherApp.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRunasadministratorMenuItem
        {
            get
            {
                if ((this.mUIRunasadministratorMenuItem == null))
                {
                    this.mUIRunasadministratorMenuItem = new WinMenuItem(this);
                    #region Условия поиска
                    this.mUIRunasadministratorMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Run as administrator";
                    #endregion
                }
                return this.mUIRunasadministratorMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRunasadministratorMenuItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIСетевыеинформационныWindow : WinWindow
    {
        
        public UIСетевыеинформационныWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Сетевые информационные технологии";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Условия поиска
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        
        private WinButton mUIЗакрытьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIСетевыеинформационныWindow1 : WpfWindow
    {
        
        public UIСетевыеинформационныWindow1()
        {
            #region Условия поиска
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Сетевые информационные технологии";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom15 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom15(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public WpfText UIСервисдлятестированиText
        {
            get
            {
                if ((this.mUIСервисдлятестированиText == null))
                {
                    this.mUIСервисдлятестированиText = new WpfText(this);
                    #region Условия поиска
                    this.mUIСервисдлятестированиText.SearchProperties[WpfText.PropertyNames.Name] = "Сервис для тестирования доступен!";
                    this.mUIСервисдлятестированиText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIСервисдлятестированиText;
            }
        }
        
        public WpfButton UIОпрограммеButton
        {
            get
            {
                if ((this.mUIОпрограммеButton == null))
                {
                    this.mUIОпрограммеButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIОпрограммеButton.SearchProperties[WpfButton.PropertyNames.Name] = "О программе";
                    this.mUIОпрограммеButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIОпрограммеButton;
            }
        }
        
        public WpfButton UIОпрограммеButton1
        {
            get
            {
                if ((this.mUIОпрограммеButton1 == null))
                {
                    this.mUIОпрограммеButton1 = new WpfButton(this);
                    #region Условия поиска
                    this.mUIОпрограммеButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "aboutBtn";
                    this.mUIОпрограммеButton1.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIОпрограммеButton1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private UIItemCustom15 mUIItemCustom1;
        
        private WpfText mUIСервисдлятестированиText;
        
        private WpfButton mUIОпрограммеButton;
        
        private WpfButton mUIОпрограммеButton1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UserControl";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIItemCustom11 UIItemCustom11
        {
            get
            {
                if ((this.mUIItemCustom11 == null))
                {
                    this.mUIItemCustom11 = new UIItemCustom11(this);
                }
                return this.mUIItemCustom11;
            }
        }
        
        public UIItemCustom2 UIItemCustom2
        {
            get
            {
                if ((this.mUIItemCustom2 == null))
                {
                    this.mUIItemCustom2 = new UIItemCustom2(this);
                }
                return this.mUIItemCustom2;
            }
        }
        
        public UIItemCustom21 UIItemCustom21
        {
            get
            {
                if ((this.mUIItemCustom21 == null))
                {
                    this.mUIItemCustom21 = new UIItemCustom21(this);
                }
                return this.mUIItemCustom21;
            }
        }
        
        public UIItemCustom12 UIItemCustom12
        {
            get
            {
                if ((this.mUIItemCustom12 == null))
                {
                    this.mUIItemCustom12 = new UIItemCustom12(this);
                }
                return this.mUIItemCustom12;
            }
        }
        
        public UIItemCustom13 UIItemCustom13
        {
            get
            {
                if ((this.mUIItemCustom13 == null))
                {
                    this.mUIItemCustom13 = new UIItemCustom13(this);
                }
                return this.mUIItemCustom13;
            }
        }
        
        public UIItemCustom14 UIItemCustom14
        {
            get
            {
                if ((this.mUIItemCustom14 == null))
                {
                    this.mUIItemCustom14 = new UIItemCustom14(this);
                }
                return this.mUIItemCustom14;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom1 mUIItemCustom1;
        
        private UIItemCustom11 mUIItemCustom11;
        
        private UIItemCustom2 mUIItemCustom2;
        
        private UIItemCustom21 mUIItemCustom21;
        
        private UIItemCustom12 mUIItemCustom12;
        
        private UIItemCustom13 mUIItemCustom13;
        
        private UIItemCustom14 mUIItemCustom14;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherStartView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIРедактироватьтестButton
        {
            get
            {
                if ((this.mUIРедактироватьтестButton == null))
                {
                    this.mUIРедактироватьтестButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРедактироватьтестButton.SearchProperties[WpfButton.PropertyNames.Name] = "Редактировать тест";
                    this.mUIРедактироватьтестButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьтестButton;
            }
        }
        
        public WpfText UIСетевыеинформационныText
        {
            get
            {
                if ((this.mUIСетевыеинформационныText == null))
                {
                    this.mUIСетевыеинформационныText = new WpfText(this);
                    #region Условия поиска
                    this.mUIСетевыеинформационныText.SearchProperties[WpfText.PropertyNames.Name] = "\'\'Сетевые информационные технологии\'\' ";
                    this.mUIСетевыеинформационныText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIСетевыеинформационныText;
            }
        }
        
        public WpfButton UIРедактироватьтест123Button
        {
            get
            {
                if ((this.mUIРедактироватьтест123Button == null))
                {
                    this.mUIРедактироватьтест123Button = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРедактироватьтест123Button.SearchProperties[WpfButton.PropertyNames.Name] = "Редактировать тест12321";
                    this.mUIРедактироватьтест123Button.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьтест123Button;
            }
        }
        
        public WpfButton UIРезультатыButton
        {
            get
            {
                if ((this.mUIРезультатыButton == null))
                {
                    this.mUIРезультатыButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРезультатыButton.SearchProperties[WpfButton.PropertyNames.Name] = "Результаты";
                    this.mUIРезультатыButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРезультатыButton;
            }
        }
        
        public WpfButton UIРедактироватьтестButton1
        {
            get
            {
                if ((this.mUIРедактироватьтестButton1 == null))
                {
                    this.mUIРедактироватьтестButton1 = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРедактироватьтестButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "editBtn";
                    this.mUIРедактироватьтестButton1.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьтестButton1;
            }
        }
        
        public WpfButton UIРезультатыButton1
        {
            get
            {
                if ((this.mUIРезультатыButton1 == null))
                {
                    this.mUIРезультатыButton1 = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРезультатыButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "resultBtn";
                    this.mUIРезультатыButton1.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРезультатыButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIРедактироватьтестButton;
        
        private WpfText mUIСетевыеинформационныText;
        
        private WpfButton mUIРедактироватьтест123Button;
        
        private WpfButton mUIРезультатыButton;
        
        private WpfButton mUIРедактироватьтестButton1;
        
        private WpfButton mUIРезультатыButton1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom11 : WpfCustom
    {
        
        public UIItemCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherFunctionsView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIНазадButton
        {
            get
            {
                if ((this.mUIНазадButton == null))
                {
                    this.mUIНазадButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIНазадButton.SearchProperties[WpfButton.PropertyNames.Name] = "Назад";
                    this.mUIНазадButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIНазадButton;
            }
        }
        
        public WpfButton UIРедактироватьдобавитButton
        {
            get
            {
                if ((this.mUIРедактироватьдобавитButton == null))
                {
                    this.mUIРедактироватьдобавитButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРедактироватьдобавитButton.SearchProperties[WpfButton.PropertyNames.Name] = "Редактировать/добавить";
                    this.mUIРедактироватьдобавитButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьдобавитButton;
            }
        }
        
        public WpfButton UIЗадатьпараметрытестаButton
        {
            get
            {
                if ((this.mUIЗадатьпараметрытестаButton == null))
                {
                    this.mUIЗадатьпараметрытестаButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIЗадатьпараметрытестаButton.SearchProperties[WpfButton.PropertyNames.Name] = "Задать параметры теста";
                    this.mUIЗадатьпараметрытестаButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIЗадатьпараметрытестаButton;
            }
        }
        
        public WpfButton UIНазадButton1
        {
            get
            {
                if ((this.mUIНазадButton1 == null))
                {
                    this.mUIНазадButton1 = new WpfButton(this);
                    #region Условия поиска
                    this.mUIНазадButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "backBtn";
                    this.mUIНазадButton1.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIНазадButton1;
            }
        }
        
        public WpfButton UIРедактироватьдобавитButton1
        {
            get
            {
                if ((this.mUIРедактироватьдобавитButton1 == null))
                {
                    this.mUIРедактироватьдобавитButton1 = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРедактироватьдобавитButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "addEditBtn";
                    this.mUIРедактироватьдобавитButton1.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьдобавитButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIНазадButton;
        
        private WpfButton mUIРедактироватьдобавитButton;
        
        private WpfButton mUIЗадатьпараметрытестаButton;
        
        private WpfButton mUIНазадButton1;
        
        private WpfButton mUIРедактироватьдобавитButton1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom2 : WpfCustom
    {
        
        public UIItemCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherStartView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIРезультатыButton
        {
            get
            {
                if ((this.mUIРезультатыButton == null))
                {
                    this.mUIРезультатыButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРезультатыButton.SearchProperties[WpfButton.PropertyNames.Name] = "Результаты";
                    this.mUIРезультатыButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРезультатыButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIРезультатыButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom21 : WpfCustom
    {
        
        public UIItemCustom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherAddAndEditQuestions";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIДобавитьновыйButton
        {
            get
            {
                if ((this.mUIДобавитьновыйButton == null))
                {
                    this.mUIДобавитьновыйButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIДобавитьновыйButton.SearchProperties[WpfButton.PropertyNames.Name] = "Добавить новый";
                    this.mUIДобавитьновыйButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIДобавитьновыйButton;
            }
        }
        
        public WpfButton UIРедактироватьButton
        {
            get
            {
                if ((this.mUIРедактироватьButton == null))
                {
                    this.mUIРедактироватьButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIРедактироватьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "editBtn";
                    this.mUIРедактироватьButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьButton;
            }
        }
        
        public WpfButton UIУдалитьButton
        {
            get
            {
                if ((this.mUIУдалитьButton == null))
                {
                    this.mUIУдалитьButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIУдалитьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "deleteBtn";
                    this.mUIУдалитьButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIУдалитьButton;
            }
        }
        
        public WpfButton UIДобавитьновыйButton1
        {
            get
            {
                if ((this.mUIДобавитьновыйButton1 == null))
                {
                    this.mUIДобавитьновыйButton1 = new WpfButton(this);
                    #region Условия поиска
                    this.mUIДобавитьновыйButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "newBtn";
                    this.mUIДобавитьновыйButton1.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIДобавитьновыйButton1;
            }
        }
        
        public WpfButton UIНазадButton
        {
            get
            {
                if ((this.mUIНазадButton == null))
                {
                    this.mUIНазадButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIНазадButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "backBtn";
                    this.mUIНазадButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIНазадButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIДобавитьновыйButton;
        
        private WpfButton mUIРедактироватьButton;
        
        private WpfButton mUIУдалитьButton;
        
        private WpfButton mUIДобавитьновыйButton1;
        
        private WpfButton mUIНазадButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom12 : WpfCustom
    {
        
        public UIItemCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfText UIТестированиеподисципText
        {
            get
            {
                if ((this.mUIТестированиеподисципText == null))
                {
                    this.mUIТестированиеподисципText = new WpfText(this);
                    #region Условия поиска
                    this.mUIТестированиеподисципText.SearchProperties[WpfText.PropertyNames.Name] = "Тестирование по дисциплине:";
                    this.mUIТестированиеподисципText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIТестированиеподисципText;
            }
        }
        
        public WpfText UIСетиText
        {
            get
            {
                if ((this.mUIСетиText == null))
                {
                    this.mUIСетиText = new WpfText(this);
                    #region Условия поиска
                    this.mUIСетиText.SearchProperties[WpfText.PropertyNames.Name] = "Сети";
                    this.mUIСетиText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIСетиText;
            }
        }
        
        public WpfButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIOKButton.SearchProperties[WpfButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIТестированиеподисципText;
        
        private WpfText mUIСетиText;
        
        private WpfButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom13 : WpfCustom
    {
        
        public UIItemCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RegistrationFormView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfText UIРегистрацияText
        {
            get
            {
                if ((this.mUIРегистрацияText == null))
                {
                    this.mUIРегистрацияText = new WpfText(this);
                    #region Условия поиска
                    this.mUIРегистрацияText.SearchProperties[WpfText.PropertyNames.AutomationId] = "registrTxtBlock";
                    this.mUIРегистрацияText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРегистрацияText;
            }
        }
        
        public WpfButton UIГотовоButton
        {
            get
            {
                if ((this.mUIГотовоButton == null))
                {
                    this.mUIГотовоButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIГотовоButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "okLoginBtn";
                    this.mUIГотовоButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIГотовоButton;
            }
        }
        
        public UIФамилияText UIФамилияText
        {
            get
            {
                if ((this.mUIФамилияText == null))
                {
                    this.mUIФамилияText = new UIФамилияText(this);
                }
                return this.mUIФамилияText;
            }
        }
        
        public UIИмяText UIИмяText
        {
            get
            {
                if ((this.mUIИмяText == null))
                {
                    this.mUIИмяText = new UIИмяText(this);
                }
                return this.mUIИмяText;
            }
        }
        
        public UIГруппаText UIГруппаText
        {
            get
            {
                if ((this.mUIГруппаText == null))
                {
                    this.mUIГруппаText = new UIГруппаText(this);
                }
                return this.mUIГруппаText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIРегистрацияText;
        
        private WpfButton mUIГотовоButton;
        
        private UIФамилияText mUIФамилияText;
        
        private UIИмяText mUIИмяText;
        
        private UIГруппаText mUIГруппаText;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIФамилияText : WpfText
    {
        
        public UIФамилияText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfText.PropertyNames.Name] = " Фамилия: ";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIИмяText : WpfText
    {
        
        public UIИмяText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfText.PropertyNames.Name] = " Имя: ";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIГруппаText : WpfText
    {
        
        public UIГруппаText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfText.PropertyNames.Name] = " Группа: ";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom14 : WpfCustom
    {
        
        public UIItemCustom14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartInfoPageView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIНачатьтестButton
        {
            get
            {
                if ((this.mUIНачатьтестButton == null))
                {
                    this.mUIНачатьтестButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIНачатьтестButton.SearchProperties[WpfButton.PropertyNames.Name] = "Начать тест";
                    this.mUIНачатьтестButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIНачатьтестButton;
            }
        }
        
        public WpfText UIItem000100Text
        {
            get
            {
                if ((this.mUIItem000100Text == null))
                {
                    this.mUIItem000100Text = new WpfText(this);
                    #region Условия поиска
                    this.mUIItem000100Text.SearchProperties[WpfText.PropertyNames.Name] = "00:01:00";
                    this.mUIItem000100Text.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIItem000100Text;
            }
        }
        
        public WpfText UIВремятестированияText
        {
            get
            {
                if ((this.mUIВремятестированияText == null))
                {
                    this.mUIВремятестированияText = new WpfText(this);
                    #region Условия поиска
                    this.mUIВремятестированияText.SearchProperties[WpfText.PropertyNames.Name] = "Время тестирования: ";
                    this.mUIВремятестированияText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIВремятестированияText;
            }
        }
        
        public WpfText UIItem6Text
        {
            get
            {
                if ((this.mUIItem6Text == null))
                {
                    this.mUIItem6Text = new WpfText(this);
                    #region Условия поиска
                    this.mUIItem6Text.SearchProperties[WpfText.PropertyNames.Name] = "6";
                    this.mUIItem6Text.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIItem6Text;
            }
        }
        
        public WpfText UIКоличествовопросовText
        {
            get
            {
                if ((this.mUIКоличествовопросовText == null))
                {
                    this.mUIКоличествовопросовText = new WpfText(this);
                    #region Условия поиска
                    this.mUIКоличествовопросовText.SearchProperties[WpfText.PropertyNames.Name] = "Количество вопросов: ";
                    this.mUIКоличествовопросовText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIКоличествовопросовText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIНачатьтестButton;
        
        private WpfText mUIItem000100Text;
        
        private WpfText mUIВремятестированияText;
        
        private WpfText mUIItem6Text;
        
        private WpfText mUIКоличествовопросовText;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemCustom15 : WpfCustom
    {
        
        public UIItemCustom15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherAddAndEditQuestions";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIItemList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList(this);
                }
                return this.mUIItemList;
            }
        }
        
        public UIСписоквопросовText UIСписоквопросовText
        {
            get
            {
                if ((this.mUIСписоквопросовText == null))
                {
                    this.mUIСписоквопросовText = new UIСписоквопросовText(this);
                }
                return this.mUIСписоквопросовText;
            }
        }
        #endregion
        
        #region Fields
        private UIItemList mUIItemList;
        
        private UIСписоквопросовText mUIСписоквопросовText;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemList : WpfList
    {
        
        public UIItemList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWCFServiceLibraryQueListItem
        {
            get
            {
                if ((this.mUIWCFServiceLibraryQueListItem == null))
                {
                    this.mUIWCFServiceLibraryQueListItem = new WpfListItem(this);
                    #region Условия поиска
                    this.mUIWCFServiceLibraryQueListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "WCFServiceLibrary.Question";
                    this.mUIWCFServiceLibraryQueListItem.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIWCFServiceLibraryQueListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWCFServiceLibraryQueListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIСписоквопросовText : WpfText
    {
        
        public UIСписоквопросовText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfText.PropertyNames.Name] = " Список вопросов:";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WpfList(this);
                    #region Условия поиска
                    this.mUIItemList.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemList.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Условия поиска
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                }
                return this.mUIItemEdit;
            }
        }
        
        public WpfButton UIДобавитьButton
        {
            get
            {
                if ((this.mUIДобавитьButton == null))
                {
                    this.mUIДобавитьButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIДобавитьButton.SearchProperties[WpfButton.PropertyNames.Name] = "Добавить";
                    #endregion
                }
                return this.mUIДобавитьButton;
            }
        }
        
        public UIItemList1 UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new UIItemList1(this);
                }
                return this.mUIItemList;
            }
        }
        
        public WpfButton UIГотовоButton
        {
            get
            {
                if ((this.mUIГотовоButton == null))
                {
                    this.mUIГотовоButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIГотовоButton.SearchProperties[WpfButton.PropertyNames.Name] = "Готово";
                    #endregion
                }
                return this.mUIГотовоButton;
            }
        }
        
        public WpfButton UIУдалитьButton
        {
            get
            {
                if ((this.mUIУдалитьButton == null))
                {
                    this.mUIУдалитьButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIУдалитьButton.SearchProperties[WpfButton.PropertyNames.Name] = "Удалить";
                    #endregion
                }
                return this.mUIУдалитьButton;
            }
        }
        
        public WpfButton UIОтменаButton
        {
            get
            {
                if ((this.mUIОтменаButton == null))
                {
                    this.mUIОтменаButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIОтменаButton.SearchProperties[WpfButton.PropertyNames.Name] = "Отмена";
                    #endregion
                }
                return this.mUIОтменаButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        
        private WpfButton mUIДобавитьButton;
        
        private UIItemList1 mUIItemList;
        
        private WpfButton mUIГотовоButton;
        
        private WpfButton mUIУдалитьButton;
        
        private WpfButton mUIОтменаButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemList1 : WpfList
    {
        
        public UIItemList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public UIWCFServiceLibraryAnsListItem UIWCFServiceLibraryAnsListItem
        {
            get
            {
                if ((this.mUIWCFServiceLibraryAnsListItem == null))
                {
                    this.mUIWCFServiceLibraryAnsListItem = new UIWCFServiceLibraryAnsListItem(this);
                }
                return this.mUIWCFServiceLibraryAnsListItem;
            }
        }
        
        public UIWCFServiceLibraryAnsListItem1 UIWCFServiceLibraryAnsListItem1
        {
            get
            {
                if ((this.mUIWCFServiceLibraryAnsListItem1 == null))
                {
                    this.mUIWCFServiceLibraryAnsListItem1 = new UIWCFServiceLibraryAnsListItem1(this);
                }
                return this.mUIWCFServiceLibraryAnsListItem1;
            }
        }
        
        public UIWCFServiceLibraryAnsListItem2 UIWCFServiceLibraryAnsListItem2
        {
            get
            {
                if ((this.mUIWCFServiceLibraryAnsListItem2 == null))
                {
                    this.mUIWCFServiceLibraryAnsListItem2 = new UIWCFServiceLibraryAnsListItem2(this);
                }
                return this.mUIWCFServiceLibraryAnsListItem2;
            }
        }
        #endregion
        
        #region Fields
        private UIWCFServiceLibraryAnsListItem mUIWCFServiceLibraryAnsListItem;
        
        private UIWCFServiceLibraryAnsListItem1 mUIWCFServiceLibraryAnsListItem1;
        
        private UIWCFServiceLibraryAnsListItem2 mUIWCFServiceLibraryAnsListItem2;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIWCFServiceLibraryAnsListItem : WpfListItem
    {
        
        public UIWCFServiceLibraryAnsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "WCFServiceLibrary.Answer";
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIWCFServiceLibraryAnsListItem1 : WpfListItem
    {
        
        public UIWCFServiceLibraryAnsListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "WCFServiceLibrary.Answer";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIWCFServiceLibraryAnsListItem2 : WpfListItem
    {
        
        public UIWCFServiceLibraryAnsListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "WCFServiceLibrary.Answer";
            this.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                }
                return this.mUIItemEdit;
            }
        }
        
        public WpfCheckBox UIItemCheckBox
        {
            get
            {
                if ((this.mUIItemCheckBox == null))
                {
                    this.mUIItemCheckBox = new WpfCheckBox(this);
                }
                return this.mUIItemCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        
        private WpfCheckBox mUIItemCheckBox;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICodedUIWindow : WinWindow
    {
        
        public UICodedUIWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CodedUI";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("CodedUI");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("CodedUI");
            #endregion
        }
        
        #region Properties
        public UITeacherAppexeListItem1 UITeacherAppexeListItem
        {
            get
            {
                if ((this.mUITeacherAppexeListItem == null))
                {
                    this.mUITeacherAppexeListItem = new UITeacherAppexeListItem1(this);
                }
                return this.mUITeacherAppexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITeacherAppexeListItem1 mUITeacherAppexeListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITeacherAppexeListItem1 : WinListItem
    {
        
        public UITeacherAppexeListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "TeacherApp.exe";
            this.WindowTitles.Add("CodedUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("CodedUI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Просмотр элементов";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("CodedUI");
            #endregion
        }
        
        #region Properties
        public UITeacherAppListItem UITeacherAppListItem
        {
            get
            {
                if ((this.mUITeacherAppListItem == null))
                {
                    this.mUITeacherAppListItem = new UITeacherAppListItem(this);
                }
                return this.mUITeacherAppListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITeacherAppListItem mUITeacherAppListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITeacherAppListItem : WinListItem
    {
        
        public UITeacherAppListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "TeacherApp";
            this.WindowTitles.Add("CodedUI");
            #endregion
        }
        
        #region Properties
        public WinEdit UIИмяEdit
        {
            get
            {
                if ((this.mUIИмяEdit == null))
                {
                    this.mUIИмяEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIИмяEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Имя";
                    this.mUIИмяEdit.WindowTitles.Add("CodedUI");
                    #endregion
                }
                return this.mUIИмяEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIИмяEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIStudentAppWindow : WinWindow
    {
        
        public UIStudentAppWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "StudentApp";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("StudentApp");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Просмотр элементов";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("StudentApp");
            #endregion
        }
        
        #region Properties
        public UITestSystemAppListItem UITestSystemAppListItem
        {
            get
            {
                if ((this.mUITestSystemAppListItem == null))
                {
                    this.mUITestSystemAppListItem = new UITestSystemAppListItem(this);
                }
                return this.mUITestSystemAppListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestSystemAppListItem mUITestSystemAppListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITestSystemAppListItem : WinListItem
    {
        
        public UITestSystemAppListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "TestSystemApp";
            this.WindowTitles.Add("StudentApp");
            #endregion
        }
        
        #region Properties
        public WinEdit UIИмяEdit
        {
            get
            {
                if ((this.mUIИмяEdit == null))
                {
                    this.mUIИмяEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIИмяEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Имя";
                    this.mUIИмяEdit.WindowTitles.Add("StudentApp");
                    #endregion
                }
                return this.mUIИмяEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIИмяEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICodedUIStudentAppWindow : WinWindow
    {
        
        public UICodedUIStudentAppWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CodedUI StudentApp";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("CodedUI StudentApp");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Просмотр элементов";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("CodedUI StudentApp");
            #endregion
        }
        
        #region Properties
        public UITestSystemAppListItem1 UITestSystemAppListItem
        {
            get
            {
                if ((this.mUITestSystemAppListItem == null))
                {
                    this.mUITestSystemAppListItem = new UITestSystemAppListItem1(this);
                }
                return this.mUITestSystemAppListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestSystemAppListItem1 mUITestSystemAppListItem;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UITestSystemAppListItem1 : WinListItem
    {
        
        public UITestSystemAppListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinListItem.PropertyNames.Name] = "TestSystemApp";
            this.WindowTitles.Add("CodedUI StudentApp");
            #endregion
        }
        
        #region Properties
        public WinEdit UIИмяEdit
        {
            get
            {
                if ((this.mUIИмяEdit == null))
                {
                    this.mUIИмяEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIИмяEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Имя";
                    this.mUIИмяEdit.WindowTitles.Add("CodedUI StudentApp");
                    #endregion
                }
                return this.mUIИмяEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIИмяEdit;
        #endregion
    }
}
