// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TeacherCodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestNameAssert - Use 'TestNameAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestNameAssert()
        {
            #region Variable Declarations
            WpfText uIСетевыеинформационныText = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIСетевыеинформационныText;
            #endregion

            // Verify that the 'DisplayText' property of '''Сетевые информационные технологии''' label equals '''Сетевые информационные технологии'' '
            Assert.AreEqual(this.TestNameAssertExpectedValues.UIСетевыеинформационныTextDisplayText, uIСетевыеинформационныText.DisplayText, "Неверное наименование теста");
        }
        
        /// <summary>
        /// TestEditBtnAssert - Use 'TestEditBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestEditBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton;
            #endregion

            // Verify that the 'Exists' property of 'Редактировать тест' button equals 'True'
            Assert.AreEqual(this.TestEditBtnAssertExpectedValues.UIРедактироватьтестButtonExists, uIРедактироватьтестButton.Exists, "Отсутствует кнопка \"Редактировать тест\"");

            // Verify that the 'Enabled' property of 'Редактировать тест' button equals 'True'
            Assert.AreEqual(this.TestEditBtnAssertExpectedValues.UIРедактироватьтестButtonEnabled, uIРедактироватьтестButton.Enabled, "Кнопка \"Редактировать тест\" недоступна");
        }
        
        /// <summary>
        /// TestResultBtnAssert - Use 'TestResultBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestResultBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIРезультатыButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIРезультатыButton;
            #endregion

            // Verify that the 'Exists' property of 'Результаты' button equals 'True'
            Assert.AreEqual(this.TestResultBtnAssertExpectedValues.UIРезультатыButtonExists, uIРезультатыButton.Exists, "Отсутсвует кнопка \"Результаты\"");

            // Verify that the 'Enabled' property of 'Результаты' button equals 'True'
            Assert.AreEqual(this.TestResultBtnAssertExpectedValues.UIРезультатыButtonEnabled, uIРезультатыButton.Enabled, "Кнопка \"Результаты\" недоступна");
        }
        
        /// <summary>
        /// AboutBtnAssert - Use 'AboutBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AboutBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIОпрограммеButton = this.UIСетевыеинформационныWindow.UIОпрограммеButton;
            #endregion

            // Verify that the 'Exists' property of 'О программе' button equals 'True'
            Assert.AreEqual(this.AboutBtnAssertExpectedValues.UIОпрограммеButtonExists, uIОпрограммеButton.Exists, "Кнопка \"О программе\" отсутствует");

            // Verify that the 'Enabled' property of 'О программе' button equals 'True'
            Assert.AreEqual(this.AboutBtnAssertExpectedValues.UIОпрограммеButtonEnabled, uIОпрограммеButton.Enabled, "Кнопка \"О программе\" недоступна");
        }
        
        /// <summary>
        /// StatusBarAssert - Use 'StatusBarAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void StatusBarAssert()
        {
            #region Variable Declarations
            WpfText uIСервисдлятестированиText = this.UIСетевыеинформационныWindow.UIСервисдлятестированиText;
            #endregion

            // Verify that the 'Exists' property of 'Сервис для тестирования доступен!' label equals 'True'
            Assert.AreEqual(this.StatusBarAssertExpectedValues.UIСервисдлятестированиTextExists, uIСервисдлятестированиText.Exists, "Отсутствует строка состояния");

            // Verify that the 'DisplayText' property of 'Сервис для тестирования доступен!' label equals 'Сервис для тестирования доступен!'
            Assert.AreEqual(this.StatusBarAssertExpectedValues.UIСервисдлятестированиTextDisplayText, uIСервисдлятестированиText.DisplayText, "Ошибка состояния сервиса");
        }
        
        /// <summary>
        /// TestEditViewOpenRecorded
        /// </summary>
        public void TestEditViewOpenRecorded()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton;
            #endregion

            // Click 'Редактировать тест' button
            Mouse.Click(uIРедактироватьтестButton, new Point(118, 28));
        }
        
        /// <summary>
        /// EditAddBtnAssert - Use 'EditAddBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void EditAddBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьдобавитButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIРедактироватьдобавитButton;
            #endregion

            // Verify that the 'Exists' property of 'Редактировать/добавить' button equals 'True'
            Assert.AreEqual(this.EditAddBtnAssertExpectedValues.UIРедактироватьдобавитButtonExists, uIРедактироватьдобавитButton.Exists, "Отсутствует кнопка \"Редактировать\\Добавить\"");

            // Verify that the 'Enabled' property of 'Редактировать/добавить' button equals 'True'
            Assert.AreEqual(this.EditAddBtnAssertExpectedValues.UIРедактироватьдобавитButtonEnabled, uIРедактироватьдобавитButton.Enabled, "Кнопка \"Редактировать\\Добавить\" недоступна");
        }
        
        /// <summary>
        /// TestParamBtnAssert - Use 'TestParamBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestParamBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIЗадатьпараметрытестаButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIЗадатьпараметрытестаButton;
            #endregion

            // Verify that the 'Exists' property of 'Задать параметры теста' button equals 'True'
            Assert.AreEqual(this.TestParamBtnAssertExpectedValues.UIЗадатьпараметрытестаButtonExists, uIЗадатьпараметрытестаButton.Exists, "Кнопка \"Задать параметры теста\" отсутствует");

            // Verify that the 'Enabled' property of 'Задать параметры теста' button equals 'True'
            Assert.AreEqual(this.TestParamBtnAssertExpectedValues.UIЗадатьпараметрытестаButtonEnabled, uIЗадатьпараметрытестаButton.Enabled, "Конпка \"Задать параметры теста\" недоступна");
        }
        
        /// <summary>
        /// TestEditView_BackBtnAssert - Use 'TestEditView_BackBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestEditView_BackBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIНазадButton;
            #endregion

            // Verify that the 'Exists' property of 'Назад' button equals 'True'
            Assert.AreEqual(this.TestEditView_BackBtnAssertExpectedValues.UIНазадButtonExists, uIНазадButton.Exists, "Кнопка \"Назад\" отсутствует");

            // Verify that the 'Enabled' property of 'Назад' button equals 'True'
            Assert.AreEqual(this.TestEditView_BackBtnAssertExpectedValues.UIНазадButtonEnabled, uIНазадButton.Enabled, "Кнопка \"Назад\" недоступна");
        }
        
        /// <summary>
        /// TestEditViewBackRecorded
        /// </summary>
        public void TestEditViewBackRecorded()
        {
            #region Variable Declarations
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIНазадButton;
            #endregion

            // Click 'Назад' button
            Mouse.Click(uIНазадButton, new Point(89, 15));
        }
        
        /// <summary>
        /// QuestionListOpenRecorded
        /// </summary>
        public void QuestionListOpenRecorded()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьдобавитButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIРедактироватьдобавитButton;
            #endregion

            // Click 'Редактировать/добавить' button
            Mouse.Click(uIРедактироватьдобавитButton, new Point(141, 28));
        }
        
        /// <summary>
        /// EditBtnDefaultAssert - Use 'EditBtnDefaultAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void EditBtnDefaultAssert()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom12.UIРедактироватьButton;
            #endregion

            // Verify that the 'Exists' property of 'Редактировать' button equals 'True'
            Assert.AreEqual(this.EditBtnDefaultAssertExpectedValues.UIРедактироватьButtonExists, uIРедактироватьButton.Exists, "Кнопка \"Редактировать\" отсутствует");

            // Verify that the 'Enabled' property of 'Редактировать' button equals 'False'
            Assert.AreEqual(this.EditBtnDefaultAssertExpectedValues.UIРедактироватьButtonEnabled, uIРедактироватьButton.Enabled, "Кнопка \"Редактировать\" доступна по умолчанию");
        }
        
        /// <summary>
        /// DeleteQuestionBtnDefaultAssert - Use 'DeleteQuestionBtnDefaultAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DeleteQuestionBtnDefaultAssert()
        {
            #region Variable Declarations
            WpfButton uIУдалитьButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom12.UIУдалитьButton;
            #endregion

            // Verify that the 'Exists' property of 'Удалить' button equals 'True'
            Assert.AreEqual(this.DeleteQuestionBtnDefaultAssertExpectedValues.UIУдалитьButtonExists, uIУдалитьButton.Exists, "Кнопка \"Удалить\" отсутствует");

            // Verify that the 'Enabled' property of 'Удалить' button equals 'False'
            Assert.AreEqual(this.DeleteQuestionBtnDefaultAssertExpectedValues.UIУдалитьButtonEnabled, uIУдалитьButton.Enabled, "Кнопка \"Удалить\" доступна по умолчанию");
        }
        
        /// <summary>
        /// AddNewQuestionBtnDefaultAssert - Use 'AddNewQuestionBtnDefaultAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddNewQuestionBtnDefaultAssert()
        {
            #region Variable Declarations
            WpfButton uIДобавитьновыйButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom12.UIДобавитьновыйButton;
            #endregion

            // Verify that the 'Exists' property of 'Добавить новый' button equals 'True'
            Assert.AreEqual(this.AddNewQuestionBtnDefaultAssertExpectedValues.UIДобавитьновыйButtonExists, uIДобавитьновыйButton.Exists, "Кнопка \"Добавить новый\" отсутствует");

            // Verify that the 'Enabled' property of 'Добавить новый' button equals 'True'
            Assert.AreEqual(this.AddNewQuestionBtnDefaultAssertExpectedValues.UIДобавитьновыйButtonEnabled, uIДобавитьновыйButton.Enabled, "Кнопка \"Добавить новый\"  недоступна по умолчанию");
        }
        
        /// <summary>
        /// QuestionAddEditView_BackBtnAssert - Use 'QuestionAddEditView_BackBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void QuestionAddEditView_BackBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom12.UIНазадButton;
            #endregion

            // Verify that the 'Exists' property of 'Назад' button equals 'True'
            Assert.AreEqual(this.QuestionAddEditView_BackBtnAssertExpectedValues.UIНазадButtonExists, uIНазадButton.Exists, "Кнопка \"Назад\" отсутствует");

            // Verify that the 'Enabled' property of 'Назад' button equals 'True'
            Assert.AreEqual(this.QuestionAddEditView_BackBtnAssertExpectedValues.UIНазадButtonEnabled, uIНазадButton.Enabled, "Кнопка \"Назад\" недоступна по умолчанию");
        }
        
        /// <summary>
        /// QuestionListSelectFirstRecorded - Use 'QuestionListSelectFirstRecordedParams' to pass parameters into this method.
        /// </summary>
        public void QuestionListSelectFirstRecorded()
        {
            #region Variable Declarations
            WpfList uIItemList = this.UIСетевыеинформационныWindow.UIItemCustom1.UIСписоквопросовText.UIItemList;
            #endregion

            // Select 'WCFServiceLibrary.Question' in first list box next to 'Список вопросов:' label
            uIItemList.SelectedItemsAsString = this.QuestionListSelectFirstRecordedParams.UIItemListSelectedItemsAsString;
        }
        
        /// <summary>
        /// QuestionListSelected_EditAddBtnAssert - Use 'QuestionListSelected_EditAddBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void QuestionListSelected_EditAddBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom12.UIРедактироватьButton;
            #endregion

            // Verify that the 'Enabled' property of 'Редактировать' button equals 'True'
            Assert.AreEqual(this.QuestionListSelected_EditAddBtnAssertExpectedValues.UIРедактироватьButtonEnabled, uIРедактироватьButton.Enabled, "Кнопка \"Редактировать\" недоступна при выбранном вопросе");
        }
        
        /// <summary>
        /// QuestionListSelected_QuestionDeleteBtnAssert - Use 'QuestionListSelected_QuestionDeleteBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void QuestionListSelected_QuestionDeleteBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIУдалитьButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom12.UIУдалитьButton;
            #endregion

            // Verify that the 'Enabled' property of 'Удалить' button equals 'True'
            Assert.AreEqual(this.QuestionListSelected_QuestionDeleteBtnAssertExpectedValues.UIУдалитьButtonEnabled, uIУдалитьButton.Enabled, "Кнопка \"Удалить\" недоступна при выбранном вопросе");
        }
        
        /// <summary>
        /// QuestionAddNewViewRecorded
        /// </summary>
        public void QuestionAddNewViewRecorded()
        {
            #region Variable Declarations
            WpfButton uIДобавитьновыйButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom12.UIДобавитьновыйButton;
            #endregion

            // Click 'Добавить новый' button
            Mouse.Click(uIДобавитьновыйButton, new Point(119, 25));
        }
        
        /// <summary>
        /// AddQuestionView_AddBtnAssert - Use 'AddQuestionView_AddBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddQuestionView_AddBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIДобавитьButton = this.UIWpfWindow.UIДобавитьButton;
            #endregion

            // Verify that the 'Exists' property of 'Добавить' button equals 'True'
            Assert.AreEqual(this.AddQuestionView_AddBtnAssertExpectedValues.UIДобавитьButtonExists, uIДобавитьButton.Exists, "Кнопка \"Добавить\" в форме добавления вопроса отсутствует");

            // Verify that the 'Enabled' property of 'Добавить' button equals 'True'
            Assert.AreEqual(this.AddQuestionView_AddBtnAssertExpectedValues.UIДобавитьButtonEnabled, uIДобавитьButton.Enabled, "Кнопка \"Добавить\" в форме добавления вопроса неактивна");
        }
        
        /// <summary>
        /// AddQuestionView_DeleteBtnAssert - Use 'AddQuestionView_DeleteBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddQuestionView_DeleteBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIУдалитьButton = this.UIWpfWindow.UIУдалитьButton;
            #endregion

            // Verify that the 'Exists' property of 'Удалить' button equals 'True'
            Assert.AreEqual(this.AddQuestionView_DeleteBtnAssertExpectedValues.UIУдалитьButtonExists, uIУдалитьButton.Exists, "Кнопка \"Удалить\" в форме добавления вопроса отсутствует");

            // Verify that the 'Enabled' property of 'Удалить' button equals 'False'
            Assert.AreEqual(this.AddQuestionView_DeleteBtnAssertExpectedValues.UIУдалитьButtonEnabled, uIУдалитьButton.Enabled, "Кнопка \"Удалить\" в форме добавления вопроса активна по умолчанию");
        }
        
        /// <summary>
        /// AddQuestionView_OkBtnAssert - Use 'AddQuestionView_OkBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddQuestionView_OkBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIГотовоButton = this.UIWpfWindow.UIГотовоButton;
            #endregion

            // Verify that the 'Exists' property of 'Готово' button equals 'True'
            Assert.AreEqual(this.AddQuestionView_OkBtnAssertExpectedValues.UIГотовоButtonExists, uIГотовоButton.Exists, "Кнопка \"Готово\" в форме добавления вопроса отсутствует");

            // Verify that the 'Enabled' property of 'Готово' button equals 'True'
            Assert.AreEqual(this.AddQuestionView_OkBtnAssertExpectedValues.UIГотовоButtonEnabled, uIГотовоButton.Enabled, "Кнопка \"Готово\" в форме добавления вопроса доступна по умолчанию");
        }
        
        /// <summary>
        /// AddQuestionView_CancelBtnAssert - Use 'AddQuestionView_CancelBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddQuestionView_CancelBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIОтменаButton = this.UIWpfWindow.UIОтменаButton;
            #endregion

            // Verify that the 'Exists' property of 'Отмена' button equals 'True'
            Assert.AreEqual(this.AddQuestionView_CancelBtnAssertExpectedValues.UIОтменаButtonExists, uIОтменаButton.Exists, "Кнопка \"Отмена\" на форме добавления вопроса отсутствует");

            // Verify that the 'Enabled' property of 'Отмена' button equals 'True'
            Assert.AreEqual(this.AddQuestionView_CancelBtnAssertExpectedValues.UIОтменаButtonEnabled, uIОтменаButton.Enabled, "Кнопка \"Отмена\" на форме добавления вопроса неактивна");
        }
        
        /// <summary>
        /// AddQuestionView_CancelRecorded
        /// </summary>
        public void AddQuestionView_CancelRecorded()
        {
            #region Variable Declarations
            WpfButton uIОтменаButton = this.UIWpfWindow.UIОтменаButton;
            #endregion

            // Click 'Отмена' button
            Mouse.Click(uIОтменаButton, new Point(20, 19));
        }
        
        #region Properties
        public virtual TestNameAssertExpectedValues TestNameAssertExpectedValues
        {
            get
            {
                if ((this.mTestNameAssertExpectedValues == null))
                {
                    this.mTestNameAssertExpectedValues = new TestNameAssertExpectedValues();
                }
                return this.mTestNameAssertExpectedValues;
            }
        }
        
        public virtual TestEditBtnAssertExpectedValues TestEditBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestEditBtnAssertExpectedValues == null))
                {
                    this.mTestEditBtnAssertExpectedValues = new TestEditBtnAssertExpectedValues();
                }
                return this.mTestEditBtnAssertExpectedValues;
            }
        }
        
        public virtual TestResultBtnAssertExpectedValues TestResultBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestResultBtnAssertExpectedValues == null))
                {
                    this.mTestResultBtnAssertExpectedValues = new TestResultBtnAssertExpectedValues();
                }
                return this.mTestResultBtnAssertExpectedValues;
            }
        }
        
        public virtual AboutBtnAssertExpectedValues AboutBtnAssertExpectedValues
        {
            get
            {
                if ((this.mAboutBtnAssertExpectedValues == null))
                {
                    this.mAboutBtnAssertExpectedValues = new AboutBtnAssertExpectedValues();
                }
                return this.mAboutBtnAssertExpectedValues;
            }
        }
        
        public virtual StatusBarAssertExpectedValues StatusBarAssertExpectedValues
        {
            get
            {
                if ((this.mStatusBarAssertExpectedValues == null))
                {
                    this.mStatusBarAssertExpectedValues = new StatusBarAssertExpectedValues();
                }
                return this.mStatusBarAssertExpectedValues;
            }
        }
        
        public virtual EditAddBtnAssertExpectedValues EditAddBtnAssertExpectedValues
        {
            get
            {
                if ((this.mEditAddBtnAssertExpectedValues == null))
                {
                    this.mEditAddBtnAssertExpectedValues = new EditAddBtnAssertExpectedValues();
                }
                return this.mEditAddBtnAssertExpectedValues;
            }
        }
        
        public virtual TestParamBtnAssertExpectedValues TestParamBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestParamBtnAssertExpectedValues == null))
                {
                    this.mTestParamBtnAssertExpectedValues = new TestParamBtnAssertExpectedValues();
                }
                return this.mTestParamBtnAssertExpectedValues;
            }
        }
        
        public virtual TestEditView_BackBtnAssertExpectedValues TestEditView_BackBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestEditView_BackBtnAssertExpectedValues == null))
                {
                    this.mTestEditView_BackBtnAssertExpectedValues = new TestEditView_BackBtnAssertExpectedValues();
                }
                return this.mTestEditView_BackBtnAssertExpectedValues;
            }
        }
        
        public virtual EditBtnDefaultAssertExpectedValues EditBtnDefaultAssertExpectedValues
        {
            get
            {
                if ((this.mEditBtnDefaultAssertExpectedValues == null))
                {
                    this.mEditBtnDefaultAssertExpectedValues = new EditBtnDefaultAssertExpectedValues();
                }
                return this.mEditBtnDefaultAssertExpectedValues;
            }
        }
        
        public virtual DeleteQuestionBtnDefaultAssertExpectedValues DeleteQuestionBtnDefaultAssertExpectedValues
        {
            get
            {
                if ((this.mDeleteQuestionBtnDefaultAssertExpectedValues == null))
                {
                    this.mDeleteQuestionBtnDefaultAssertExpectedValues = new DeleteQuestionBtnDefaultAssertExpectedValues();
                }
                return this.mDeleteQuestionBtnDefaultAssertExpectedValues;
            }
        }
        
        public virtual AddNewQuestionBtnDefaultAssertExpectedValues AddNewQuestionBtnDefaultAssertExpectedValues
        {
            get
            {
                if ((this.mAddNewQuestionBtnDefaultAssertExpectedValues == null))
                {
                    this.mAddNewQuestionBtnDefaultAssertExpectedValues = new AddNewQuestionBtnDefaultAssertExpectedValues();
                }
                return this.mAddNewQuestionBtnDefaultAssertExpectedValues;
            }
        }
        
        public virtual QuestionAddEditView_BackBtnAssertExpectedValues QuestionAddEditView_BackBtnAssertExpectedValues
        {
            get
            {
                if ((this.mQuestionAddEditView_BackBtnAssertExpectedValues == null))
                {
                    this.mQuestionAddEditView_BackBtnAssertExpectedValues = new QuestionAddEditView_BackBtnAssertExpectedValues();
                }
                return this.mQuestionAddEditView_BackBtnAssertExpectedValues;
            }
        }
        
        public virtual QuestionListSelectFirstRecordedParams QuestionListSelectFirstRecordedParams
        {
            get
            {
                if ((this.mQuestionListSelectFirstRecordedParams == null))
                {
                    this.mQuestionListSelectFirstRecordedParams = new QuestionListSelectFirstRecordedParams();
                }
                return this.mQuestionListSelectFirstRecordedParams;
            }
        }
        
        public virtual QuestionListSelected_EditAddBtnAssertExpectedValues QuestionListSelected_EditAddBtnAssertExpectedValues
        {
            get
            {
                if ((this.mQuestionListSelected_EditAddBtnAssertExpectedValues == null))
                {
                    this.mQuestionListSelected_EditAddBtnAssertExpectedValues = new QuestionListSelected_EditAddBtnAssertExpectedValues();
                }
                return this.mQuestionListSelected_EditAddBtnAssertExpectedValues;
            }
        }
        
        public virtual QuestionListSelected_QuestionDeleteBtnAssertExpectedValues QuestionListSelected_QuestionDeleteBtnAssertExpectedValues
        {
            get
            {
                if ((this.mQuestionListSelected_QuestionDeleteBtnAssertExpectedValues == null))
                {
                    this.mQuestionListSelected_QuestionDeleteBtnAssertExpectedValues = new QuestionListSelected_QuestionDeleteBtnAssertExpectedValues();
                }
                return this.mQuestionListSelected_QuestionDeleteBtnAssertExpectedValues;
            }
        }
        
        public virtual AddQuestionView_AddBtnAssertExpectedValues AddQuestionView_AddBtnAssertExpectedValues
        {
            get
            {
                if ((this.mAddQuestionView_AddBtnAssertExpectedValues == null))
                {
                    this.mAddQuestionView_AddBtnAssertExpectedValues = new AddQuestionView_AddBtnAssertExpectedValues();
                }
                return this.mAddQuestionView_AddBtnAssertExpectedValues;
            }
        }
        
        public virtual AddQuestionView_DeleteBtnAssertExpectedValues AddQuestionView_DeleteBtnAssertExpectedValues
        {
            get
            {
                if ((this.mAddQuestionView_DeleteBtnAssertExpectedValues == null))
                {
                    this.mAddQuestionView_DeleteBtnAssertExpectedValues = new AddQuestionView_DeleteBtnAssertExpectedValues();
                }
                return this.mAddQuestionView_DeleteBtnAssertExpectedValues;
            }
        }
        
        public virtual AddQuestionView_OkBtnAssertExpectedValues AddQuestionView_OkBtnAssertExpectedValues
        {
            get
            {
                if ((this.mAddQuestionView_OkBtnAssertExpectedValues == null))
                {
                    this.mAddQuestionView_OkBtnAssertExpectedValues = new AddQuestionView_OkBtnAssertExpectedValues();
                }
                return this.mAddQuestionView_OkBtnAssertExpectedValues;
            }
        }
        
        public virtual AddQuestionView_CancelBtnAssertExpectedValues AddQuestionView_CancelBtnAssertExpectedValues
        {
            get
            {
                if ((this.mAddQuestionView_CancelBtnAssertExpectedValues == null))
                {
                    this.mAddQuestionView_CancelBtnAssertExpectedValues = new AddQuestionView_CancelBtnAssertExpectedValues();
                }
                return this.mAddQuestionView_CancelBtnAssertExpectedValues;
            }
        }
        
        public UIСетевыеинформационныWindow UIСетевыеинформационныWindow
        {
            get
            {
                if ((this.mUIСетевыеинформационныWindow == null))
                {
                    this.mUIСетевыеинформационныWindow = new UIСетевыеинформационныWindow();
                }
                return this.mUIСетевыеинформационныWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestNameAssertExpectedValues mTestNameAssertExpectedValues;
        
        private TestEditBtnAssertExpectedValues mTestEditBtnAssertExpectedValues;
        
        private TestResultBtnAssertExpectedValues mTestResultBtnAssertExpectedValues;
        
        private AboutBtnAssertExpectedValues mAboutBtnAssertExpectedValues;
        
        private StatusBarAssertExpectedValues mStatusBarAssertExpectedValues;
        
        private EditAddBtnAssertExpectedValues mEditAddBtnAssertExpectedValues;
        
        private TestParamBtnAssertExpectedValues mTestParamBtnAssertExpectedValues;
        
        private TestEditView_BackBtnAssertExpectedValues mTestEditView_BackBtnAssertExpectedValues;
        
        private EditBtnDefaultAssertExpectedValues mEditBtnDefaultAssertExpectedValues;
        
        private DeleteQuestionBtnDefaultAssertExpectedValues mDeleteQuestionBtnDefaultAssertExpectedValues;
        
        private AddNewQuestionBtnDefaultAssertExpectedValues mAddNewQuestionBtnDefaultAssertExpectedValues;
        
        private QuestionAddEditView_BackBtnAssertExpectedValues mQuestionAddEditView_BackBtnAssertExpectedValues;
        
        private QuestionListSelectFirstRecordedParams mQuestionListSelectFirstRecordedParams;
        
        private QuestionListSelected_EditAddBtnAssertExpectedValues mQuestionListSelected_EditAddBtnAssertExpectedValues;
        
        private QuestionListSelected_QuestionDeleteBtnAssertExpectedValues mQuestionListSelected_QuestionDeleteBtnAssertExpectedValues;
        
        private AddQuestionView_AddBtnAssertExpectedValues mAddQuestionView_AddBtnAssertExpectedValues;
        
        private AddQuestionView_DeleteBtnAssertExpectedValues mAddQuestionView_DeleteBtnAssertExpectedValues;
        
        private AddQuestionView_OkBtnAssertExpectedValues mAddQuestionView_OkBtnAssertExpectedValues;
        
        private AddQuestionView_CancelBtnAssertExpectedValues mAddQuestionView_CancelBtnAssertExpectedValues;
        
        private UIСетевыеинформационныWindow mUIСетевыеинформационныWindow;
        
        private UIWpfWindow mUIWpfWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestNameAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestNameAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '''Сетевые информационные технологии''' label equals '''Сетевые информационные технологии'' '
        /// </summary>
        public string UIСетевыеинформационныTextDisplayText = "\'\'Сетевые информационные технологии\'\' ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEditBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEditBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Редактировать тест' button equals 'True'
        /// </summary>
        public bool UIРедактироватьтестButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Редактировать тест' button equals 'True'
        /// </summary>
        public bool UIРедактироватьтестButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestResultBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestResultBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Результаты' button equals 'True'
        /// </summary>
        public bool UIРезультатыButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Результаты' button equals 'True'
        /// </summary>
        public bool UIРезультатыButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AboutBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AboutBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'О программе' button equals 'True'
        /// </summary>
        public bool UIОпрограммеButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'О программе' button equals 'True'
        /// </summary>
        public bool UIОпрограммеButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StatusBarAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusBarAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Сервис для тестирования доступен!' label equals 'True'
        /// </summary>
        public bool UIСервисдлятестированиTextExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Сервис для тестирования доступен!' label equals 'Сервис для тестирования доступен!'
        /// </summary>
        public string UIСервисдлятестированиTextDisplayText = "Сервис для тестирования доступен!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditAddBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditAddBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Редактировать/добавить' button equals 'True'
        /// </summary>
        public bool UIРедактироватьдобавитButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Редактировать/добавить' button equals 'True'
        /// </summary>
        public bool UIРедактироватьдобавитButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestParamBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestParamBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Задать параметры теста' button equals 'True'
        /// </summary>
        public bool UIЗадатьпараметрытестаButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Задать параметры теста' button equals 'True'
        /// </summary>
        public bool UIЗадатьпараметрытестаButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEditView_BackBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEditView_BackBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Назад' button equals 'True'
        /// </summary>
        public bool UIНазадButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Назад' button equals 'True'
        /// </summary>
        public bool UIНазадButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditBtnDefaultAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditBtnDefaultAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Редактировать' button equals 'True'
        /// </summary>
        public bool UIРедактироватьButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Редактировать' button equals 'False'
        /// </summary>
        public bool UIРедактироватьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteQuestionBtnDefaultAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteQuestionBtnDefaultAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Удалить' button equals 'True'
        /// </summary>
        public bool UIУдалитьButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Удалить' button equals 'False'
        /// </summary>
        public bool UIУдалитьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddNewQuestionBtnDefaultAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddNewQuestionBtnDefaultAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Добавить новый' button equals 'True'
        /// </summary>
        public bool UIДобавитьновыйButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Добавить новый' button equals 'True'
        /// </summary>
        public bool UIДобавитьновыйButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'QuestionAddEditView_BackBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuestionAddEditView_BackBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Назад' button equals 'True'
        /// </summary>
        public bool UIНазадButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Назад' button equals 'True'
        /// </summary>
        public bool UIНазадButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'QuestionListSelectFirstRecorded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuestionListSelectFirstRecordedParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'WCFServiceLibrary.Question' in first list box next to 'Список вопросов:' label
        /// </summary>
        public string UIItemListSelectedItemsAsString = "WCFServiceLibrary.Question";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'QuestionListSelected_EditAddBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuestionListSelected_EditAddBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Редактировать' button equals 'True'
        /// </summary>
        public bool UIРедактироватьButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'QuestionListSelected_QuestionDeleteBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class QuestionListSelected_QuestionDeleteBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Удалить' button equals 'True'
        /// </summary>
        public bool UIУдалитьButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddQuestionView_AddBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddQuestionView_AddBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Добавить' button equals 'True'
        /// </summary>
        public bool UIДобавитьButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Добавить' button equals 'True'
        /// </summary>
        public bool UIДобавитьButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddQuestionView_DeleteBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddQuestionView_DeleteBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Удалить' button equals 'True'
        /// </summary>
        public bool UIУдалитьButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Удалить' button equals 'False'
        /// </summary>
        public bool UIУдалитьButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddQuestionView_OkBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddQuestionView_OkBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Готово' button equals 'True'
        /// </summary>
        public bool UIГотовоButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Готово' button equals 'True'
        /// </summary>
        public bool UIГотовоButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddQuestionView_CancelBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddQuestionView_CancelBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Отмена' button equals 'True'
        /// </summary>
        public bool UIОтменаButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Отмена' button equals 'True'
        /// </summary>
        public bool UIОтменаButtonEnabled = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIСетевыеинформационныWindow : WpfWindow
    {
        
        public UIСетевыеинформационныWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Сетевые информационные технологии";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfButton UIОпрограммеButton
        {
            get
            {
                if ((this.mUIОпрограммеButton == null))
                {
                    this.mUIОпрограммеButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIОпрограммеButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "aboutBtn";
                    this.mUIОпрограммеButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIОпрограммеButton;
            }
        }
        
        public WpfText UIСервисдлятестированиText
        {
            get
            {
                if ((this.mUIСервисдлятестированиText == null))
                {
                    this.mUIСервисдлятестированиText = new WpfText(this);
                    #region Search Criteria
                    this.mUIСервисдлятестированиText.SearchProperties[WpfText.PropertyNames.Name] = "Сервис для тестирования доступен!";
                    this.mUIСервисдлятестированиText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIСервисдлятестированиText;
            }
        }
        
        public UIItemCustom13 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom13(this);
                }
                return this.mUIItemCustom1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private WpfButton mUIОпрограммеButton;
        
        private WpfText mUIСервисдлятестированиText;
        
        private UIItemCustom13 mUIItemCustom1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UserControl";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIItemCustom11 UIItemCustom11
        {
            get
            {
                if ((this.mUIItemCustom11 == null))
                {
                    this.mUIItemCustom11 = new UIItemCustom11(this);
                }
                return this.mUIItemCustom11;
            }
        }
        
        public UIItemCustom12 UIItemCustom12
        {
            get
            {
                if ((this.mUIItemCustom12 == null))
                {
                    this.mUIItemCustom12 = new UIItemCustom12(this);
                }
                return this.mUIItemCustom12;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom1 mUIItemCustom1;
        
        private UIItemCustom11 mUIItemCustom11;
        
        private UIItemCustom12 mUIItemCustom12;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherStartView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfText UIСетевыеинформационныText
        {
            get
            {
                if ((this.mUIСетевыеинформационныText == null))
                {
                    this.mUIСетевыеинформационныText = new WpfText(this);
                    #region Search Criteria
                    this.mUIСетевыеинформационныText.SearchProperties[WpfText.PropertyNames.Name] = "\'\'Сетевые информационные технологии\'\' ";
                    this.mUIСетевыеинформационныText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIСетевыеинформационныText;
            }
        }
        
        public WpfButton UIРедактироватьтестButton
        {
            get
            {
                if ((this.mUIРедактироватьтестButton == null))
                {
                    this.mUIРедактироватьтестButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIРедактироватьтестButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "editBtn";
                    this.mUIРедактироватьтестButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьтестButton;
            }
        }
        
        public WpfButton UIРезультатыButton
        {
            get
            {
                if ((this.mUIРезультатыButton == null))
                {
                    this.mUIРезультатыButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIРезультатыButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "resultBtn";
                    this.mUIРезультатыButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРезультатыButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIСетевыеинформационныText;
        
        private WpfButton mUIРедактироватьтестButton;
        
        private WpfButton mUIРезультатыButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom11 : WpfCustom
    {
        
        public UIItemCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherFunctionsView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIРедактироватьдобавитButton
        {
            get
            {
                if ((this.mUIРедактироватьдобавитButton == null))
                {
                    this.mUIРедактироватьдобавитButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIРедактироватьдобавитButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "addEditBtn";
                    this.mUIРедактироватьдобавитButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьдобавитButton;
            }
        }
        
        public WpfButton UIЗадатьпараметрытестаButton
        {
            get
            {
                if ((this.mUIЗадатьпараметрытестаButton == null))
                {
                    this.mUIЗадатьпараметрытестаButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIЗадатьпараметрытестаButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "testParamBtn";
                    this.mUIЗадатьпараметрытестаButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIЗадатьпараметрытестаButton;
            }
        }
        
        public WpfButton UIНазадButton
        {
            get
            {
                if ((this.mUIНазадButton == null))
                {
                    this.mUIНазадButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIНазадButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "backBtn";
                    this.mUIНазадButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIНазадButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIРедактироватьдобавитButton;
        
        private WpfButton mUIЗадатьпараметрытестаButton;
        
        private WpfButton mUIНазадButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom12 : WpfCustom
    {
        
        public UIItemCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherAddAndEditQuestions";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIРедактироватьButton
        {
            get
            {
                if ((this.mUIРедактироватьButton == null))
                {
                    this.mUIРедактироватьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIРедактироватьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "editBtn";
                    this.mUIРедактироватьButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьButton;
            }
        }
        
        public WpfButton UIУдалитьButton
        {
            get
            {
                if ((this.mUIУдалитьButton == null))
                {
                    this.mUIУдалитьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIУдалитьButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "deleteBtn";
                    this.mUIУдалитьButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIУдалитьButton;
            }
        }
        
        public WpfButton UIДобавитьновыйButton
        {
            get
            {
                if ((this.mUIДобавитьновыйButton == null))
                {
                    this.mUIДобавитьновыйButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIДобавитьновыйButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "newBtn";
                    this.mUIДобавитьновыйButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIДобавитьновыйButton;
            }
        }
        
        public WpfButton UIНазадButton
        {
            get
            {
                if ((this.mUIНазадButton == null))
                {
                    this.mUIНазадButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIНазадButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "backBtn";
                    this.mUIНазадButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIНазадButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIРедактироватьButton;
        
        private WpfButton mUIУдалитьButton;
        
        private WpfButton mUIДобавитьновыйButton;
        
        private WpfButton mUIНазадButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom13 : WpfCustom
    {
        
        public UIItemCustom13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherAddAndEditQuestions";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIСписоквопросовText UIСписоквопросовText
        {
            get
            {
                if ((this.mUIСписоквопросовText == null))
                {
                    this.mUIСписоквопросовText = new UIСписоквопросовText(this);
                }
                return this.mUIСписоквопросовText;
            }
        }
        #endregion
        
        #region Fields
        private UIСписоквопросовText mUIСписоквопросовText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIСписоквопросовText : WpfText
    {
        
        public UIСписоквопросовText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = " Список вопросов:";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WpfList(this);
                    #region Search Criteria
                    this.mUIItemList.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemList.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfButton UIДобавитьButton
        {
            get
            {
                if ((this.mUIДобавитьButton == null))
                {
                    this.mUIДобавитьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIДобавитьButton.SearchProperties[WpfButton.PropertyNames.Name] = "Добавить";
                    #endregion
                }
                return this.mUIДобавитьButton;
            }
        }
        
        public WpfButton UIУдалитьButton
        {
            get
            {
                if ((this.mUIУдалитьButton == null))
                {
                    this.mUIУдалитьButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIУдалитьButton.SearchProperties[WpfButton.PropertyNames.Name] = "Удалить";
                    #endregion
                }
                return this.mUIУдалитьButton;
            }
        }
        
        public WpfButton UIГотовоButton
        {
            get
            {
                if ((this.mUIГотовоButton == null))
                {
                    this.mUIГотовоButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIГотовоButton.SearchProperties[WpfButton.PropertyNames.Name] = "Готово";
                    #endregion
                }
                return this.mUIГотовоButton;
            }
        }
        
        public WpfButton UIОтменаButton
        {
            get
            {
                if ((this.mUIОтменаButton == null))
                {
                    this.mUIОтменаButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIОтменаButton.SearchProperties[WpfButton.PropertyNames.Name] = "Отмена";
                    #endregion
                }
                return this.mUIОтменаButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIДобавитьButton;
        
        private WpfButton mUIУдалитьButton;
        
        private WpfButton mUIГотовоButton;
        
        private WpfButton mUIОтменаButton;
        #endregion
    }
}
