// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TeacherCodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestNameAssert - Use 'TestNameAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestNameAssert()
        {
            #region Variable Declarations
            WpfText uIСетевыеинформационныText = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIСетевыеинформационныText;
            #endregion

            // Verify that the 'DisplayText' property of '''Сетевые информационные технологии''' label equals '''Сетевые информационные технологии'' '
            Assert.AreEqual(this.TestNameAssertExpectedValues.UIСетевыеинформационныTextDisplayText, uIСетевыеинформационныText.DisplayText, "Неверное наименование теста");
        }
        
        /// <summary>
        /// TestEditBtnAssert - Use 'TestEditBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestEditBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton;
            #endregion

            // Verify that the 'Exists' property of 'Редактировать тест' button equals 'True'
            Assert.AreEqual(this.TestEditBtnAssertExpectedValues.UIРедактироватьтестButtonExists, uIРедактироватьтестButton.Exists, "Отсутствует кнопка \"Редактировать тест\"");

            // Verify that the 'Enabled' property of 'Редактировать тест' button equals 'True'
            Assert.AreEqual(this.TestEditBtnAssertExpectedValues.UIРедактироватьтестButtonEnabled, uIРедактироватьтестButton.Enabled, "Кнопка \"Редактировать тест\" недоступна");
        }
        
        /// <summary>
        /// TestResultBtnAssert - Use 'TestResultBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestResultBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIРезультатыButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIРезультатыButton;
            #endregion

            // Verify that the 'Exists' property of 'Результаты' button equals 'True'
            Assert.AreEqual(this.TestResultBtnAssertExpectedValues.UIРезультатыButtonExists, uIРезультатыButton.Exists, "Отсутсвует кнопка \"Результаты\"");

            // Verify that the 'Enabled' property of 'Результаты' button equals 'True'
            Assert.AreEqual(this.TestResultBtnAssertExpectedValues.UIРезультатыButtonEnabled, uIРезультатыButton.Enabled, "Кнопка \"Результаты\" недоступна");
        }
        
        /// <summary>
        /// AboutBtnAssert - Use 'AboutBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AboutBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIОпрограммеButton = this.UIСетевыеинформационныWindow.UIОпрограммеButton;
            #endregion

            // Verify that the 'Exists' property of 'О программе' button equals 'True'
            Assert.AreEqual(this.AboutBtnAssertExpectedValues.UIОпрограммеButtonExists, uIОпрограммеButton.Exists, "Кнопка \"О программе\" отсутствует");

            // Verify that the 'Enabled' property of 'О программе' button equals 'True'
            Assert.AreEqual(this.AboutBtnAssertExpectedValues.UIОпрограммеButtonEnabled, uIОпрограммеButton.Enabled, "Кнопка \"О программе\" недоступна");
        }
        
        /// <summary>
        /// StatusBarAssert - Use 'StatusBarAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void StatusBarAssert()
        {
            #region Variable Declarations
            WpfText uIСервисдлятестированиText = this.UIСетевыеинформационныWindow.UIСервисдлятестированиText;
            #endregion

            // Verify that the 'Exists' property of 'Сервис для тестирования доступен!' label equals 'True'
            Assert.AreEqual(this.StatusBarAssertExpectedValues.UIСервисдлятестированиTextExists, uIСервисдлятестированиText.Exists, "Отсутствует строка состояния");

            // Verify that the 'DisplayText' property of 'Сервис для тестирования доступен!' label equals 'Сервис для тестирования доступен!'
            Assert.AreEqual(this.StatusBarAssertExpectedValues.UIСервисдлятестированиTextDisplayText, uIСервисдлятестированиText.DisplayText, "Ошибка состояния сервиса");
        }
        
        /// <summary>
        /// TestEditViewOpenRecorded
        /// </summary>
        public void TestEditViewOpenRecorded()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьтестButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom1.UIРедактироватьтестButton;
            #endregion

            // Click 'Редактировать тест' button
            Mouse.Click(uIРедактироватьтестButton, new Point(118, 28));
        }
        
        /// <summary>
        /// EditAddBtnAssert - Use 'EditAddBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void EditAddBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIРедактироватьдобавитButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIРедактироватьдобавитButton;
            #endregion

            // Verify that the 'Exists' property of 'Редактировать/добавить' button equals 'True'
            Assert.AreEqual(this.EditAddBtnAssertExpectedValues.UIРедактироватьдобавитButtonExists, uIРедактироватьдобавитButton.Exists, "Отсутствует кнопка \"Редактировать\\Добавить\"");

            // Verify that the 'Enabled' property of 'Редактировать/добавить' button equals 'True'
            Assert.AreEqual(this.EditAddBtnAssertExpectedValues.UIРедактироватьдобавитButtonEnabled, uIРедактироватьдобавитButton.Enabled, "Кнопка \"Редактировать\\Добавить\" недоступна");
        }
        
        /// <summary>
        /// TestParamBtnAssert - Use 'TestParamBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestParamBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIЗадатьпараметрытестаButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIЗадатьпараметрытестаButton;
            #endregion

            // Verify that the 'Exists' property of 'Задать параметры теста' button equals 'True'
            Assert.AreEqual(this.TestParamBtnAssertExpectedValues.UIЗадатьпараметрытестаButtonExists, uIЗадатьпараметрытестаButton.Exists, "Кнопка \"Задать параметры теста\" отсутствует");

            // Verify that the 'Enabled' property of 'Задать параметры теста' button equals 'True'
            Assert.AreEqual(this.TestParamBtnAssertExpectedValues.UIЗадатьпараметрытестаButtonEnabled, uIЗадатьпараметрытестаButton.Enabled, "Конпка \"Задать параметры теста\" недоступна");
        }
        
        /// <summary>
        /// TestEditView_BackBtnAssert - Use 'TestEditView_BackBtnAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void TestEditView_BackBtnAssert()
        {
            #region Variable Declarations
            WpfButton uIНазадButton = this.UIСетевыеинформационныWindow.UIItemCustom.UIItemCustom11.UIНазадButton;
            #endregion

            // Verify that the 'Exists' property of 'Назад' button equals 'True'
            Assert.AreEqual(this.TestEditView_BackBtnAssertExpectedValues.UIНазадButtonExists, uIНазадButton.Exists, "Кнопка \"Назад\" отсутствует");

            // Verify that the 'Enabled' property of 'Назад' button equals 'True'
            Assert.AreEqual(this.TestEditView_BackBtnAssertExpectedValues.UIНазадButtonEnabled, uIНазадButton.Enabled, "Кнопка \"Назад\" недоступна");
        }
        
        #region Properties
        public virtual TestNameAssertExpectedValues TestNameAssertExpectedValues
        {
            get
            {
                if ((this.mTestNameAssertExpectedValues == null))
                {
                    this.mTestNameAssertExpectedValues = new TestNameAssertExpectedValues();
                }
                return this.mTestNameAssertExpectedValues;
            }
        }
        
        public virtual TestEditBtnAssertExpectedValues TestEditBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestEditBtnAssertExpectedValues == null))
                {
                    this.mTestEditBtnAssertExpectedValues = new TestEditBtnAssertExpectedValues();
                }
                return this.mTestEditBtnAssertExpectedValues;
            }
        }
        
        public virtual TestResultBtnAssertExpectedValues TestResultBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestResultBtnAssertExpectedValues == null))
                {
                    this.mTestResultBtnAssertExpectedValues = new TestResultBtnAssertExpectedValues();
                }
                return this.mTestResultBtnAssertExpectedValues;
            }
        }
        
        public virtual AboutBtnAssertExpectedValues AboutBtnAssertExpectedValues
        {
            get
            {
                if ((this.mAboutBtnAssertExpectedValues == null))
                {
                    this.mAboutBtnAssertExpectedValues = new AboutBtnAssertExpectedValues();
                }
                return this.mAboutBtnAssertExpectedValues;
            }
        }
        
        public virtual StatusBarAssertExpectedValues StatusBarAssertExpectedValues
        {
            get
            {
                if ((this.mStatusBarAssertExpectedValues == null))
                {
                    this.mStatusBarAssertExpectedValues = new StatusBarAssertExpectedValues();
                }
                return this.mStatusBarAssertExpectedValues;
            }
        }
        
        public virtual EditAddBtnAssertExpectedValues EditAddBtnAssertExpectedValues
        {
            get
            {
                if ((this.mEditAddBtnAssertExpectedValues == null))
                {
                    this.mEditAddBtnAssertExpectedValues = new EditAddBtnAssertExpectedValues();
                }
                return this.mEditAddBtnAssertExpectedValues;
            }
        }
        
        public virtual TestParamBtnAssertExpectedValues TestParamBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestParamBtnAssertExpectedValues == null))
                {
                    this.mTestParamBtnAssertExpectedValues = new TestParamBtnAssertExpectedValues();
                }
                return this.mTestParamBtnAssertExpectedValues;
            }
        }
        
        public virtual TestEditView_BackBtnAssertExpectedValues TestEditView_BackBtnAssertExpectedValues
        {
            get
            {
                if ((this.mTestEditView_BackBtnAssertExpectedValues == null))
                {
                    this.mTestEditView_BackBtnAssertExpectedValues = new TestEditView_BackBtnAssertExpectedValues();
                }
                return this.mTestEditView_BackBtnAssertExpectedValues;
            }
        }
        
        public UIСетевыеинформационныWindow UIСетевыеинформационныWindow
        {
            get
            {
                if ((this.mUIСетевыеинформационныWindow == null))
                {
                    this.mUIСетевыеинформационныWindow = new UIСетевыеинформационныWindow();
                }
                return this.mUIСетевыеинформационныWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestNameAssertExpectedValues mTestNameAssertExpectedValues;
        
        private TestEditBtnAssertExpectedValues mTestEditBtnAssertExpectedValues;
        
        private TestResultBtnAssertExpectedValues mTestResultBtnAssertExpectedValues;
        
        private AboutBtnAssertExpectedValues mAboutBtnAssertExpectedValues;
        
        private StatusBarAssertExpectedValues mStatusBarAssertExpectedValues;
        
        private EditAddBtnAssertExpectedValues mEditAddBtnAssertExpectedValues;
        
        private TestParamBtnAssertExpectedValues mTestParamBtnAssertExpectedValues;
        
        private TestEditView_BackBtnAssertExpectedValues mTestEditView_BackBtnAssertExpectedValues;
        
        private UIСетевыеинформационныWindow mUIСетевыеинформационныWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestNameAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestNameAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '''Сетевые информационные технологии''' label equals '''Сетевые информационные технологии'' '
        /// </summary>
        public string UIСетевыеинформационныTextDisplayText = "\'\'Сетевые информационные технологии\'\' ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEditBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEditBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Редактировать тест' button equals 'True'
        /// </summary>
        public bool UIРедактироватьтестButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Редактировать тест' button equals 'True'
        /// </summary>
        public bool UIРедактироватьтестButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestResultBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestResultBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Результаты' button equals 'True'
        /// </summary>
        public bool UIРезультатыButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Результаты' button equals 'True'
        /// </summary>
        public bool UIРезультатыButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AboutBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AboutBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'О программе' button equals 'True'
        /// </summary>
        public bool UIОпрограммеButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'О программе' button equals 'True'
        /// </summary>
        public bool UIОпрограммеButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StatusBarAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StatusBarAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Сервис для тестирования доступен!' label equals 'True'
        /// </summary>
        public bool UIСервисдлятестированиTextExists = true;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Сервис для тестирования доступен!' label equals 'Сервис для тестирования доступен!'
        /// </summary>
        public string UIСервисдлятестированиTextDisplayText = "Сервис для тестирования доступен!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditAddBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditAddBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Редактировать/добавить' button equals 'True'
        /// </summary>
        public bool UIРедактироватьдобавитButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Редактировать/добавить' button equals 'True'
        /// </summary>
        public bool UIРедактироватьдобавитButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestParamBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestParamBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Задать параметры теста' button equals 'True'
        /// </summary>
        public bool UIЗадатьпараметрытестаButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Задать параметры теста' button equals 'True'
        /// </summary>
        public bool UIЗадатьпараметрытестаButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestEditView_BackBtnAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestEditView_BackBtnAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Назад' button equals 'True'
        /// </summary>
        public bool UIНазадButtonExists = true;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Назад' button equals 'True'
        /// </summary>
        public bool UIНазадButtonEnabled = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIСетевыеинформационныWindow : WpfWindow
    {
        
        public UIСетевыеинформационныWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Сетевые информационные технологии";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfButton UIОпрограммеButton
        {
            get
            {
                if ((this.mUIОпрограммеButton == null))
                {
                    this.mUIОпрограммеButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIОпрограммеButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "aboutBtn";
                    this.mUIОпрограммеButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIОпрограммеButton;
            }
        }
        
        public WpfText UIСервисдлятестированиText
        {
            get
            {
                if ((this.mUIСервисдлятестированиText == null))
                {
                    this.mUIСервисдлятестированиText = new WpfText(this);
                    #region Search Criteria
                    this.mUIСервисдлятестированиText.SearchProperties[WpfText.PropertyNames.Name] = "Сервис для тестирования доступен!";
                    this.mUIСервисдлятестированиText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIСервисдлятестированиText;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private WpfButton mUIОпрограммеButton;
        
        private WpfText mUIСервисдлятестированиText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UserControl";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIItemCustom11 UIItemCustom11
        {
            get
            {
                if ((this.mUIItemCustom11 == null))
                {
                    this.mUIItemCustom11 = new UIItemCustom11(this);
                }
                return this.mUIItemCustom11;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom1 mUIItemCustom1;
        
        private UIItemCustom11 mUIItemCustom11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherStartView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfText UIСетевыеинформационныText
        {
            get
            {
                if ((this.mUIСетевыеинформационныText == null))
                {
                    this.mUIСетевыеинформационныText = new WpfText(this);
                    #region Search Criteria
                    this.mUIСетевыеинформационныText.SearchProperties[WpfText.PropertyNames.Name] = "\'\'Сетевые информационные технологии\'\' ";
                    this.mUIСетевыеинформационныText.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIСетевыеинформационныText;
            }
        }
        
        public WpfButton UIРедактироватьтестButton
        {
            get
            {
                if ((this.mUIРедактироватьтестButton == null))
                {
                    this.mUIРедактироватьтестButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIРедактироватьтестButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "editBtn";
                    this.mUIРедактироватьтестButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьтестButton;
            }
        }
        
        public WpfButton UIРезультатыButton
        {
            get
            {
                if ((this.mUIРезультатыButton == null))
                {
                    this.mUIРезультатыButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIРезультатыButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "resultBtn";
                    this.mUIРезультатыButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРезультатыButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIСетевыеинформационныText;
        
        private WpfButton mUIРедактироватьтестButton;
        
        private WpfButton mUIРезультатыButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom11 : WpfCustom
    {
        
        public UIItemCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TeacherFunctionsView";
            this.WindowTitles.Add("Сетевые информационные технологии");
            #endregion
        }
        
        #region Properties
        public WpfButton UIРедактироватьдобавитButton
        {
            get
            {
                if ((this.mUIРедактироватьдобавитButton == null))
                {
                    this.mUIРедактироватьдобавитButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIРедактироватьдобавитButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "addEditBtn";
                    this.mUIРедактироватьдобавитButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIРедактироватьдобавитButton;
            }
        }
        
        public WpfButton UIЗадатьпараметрытестаButton
        {
            get
            {
                if ((this.mUIЗадатьпараметрытестаButton == null))
                {
                    this.mUIЗадатьпараметрытестаButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIЗадатьпараметрытестаButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "testParamBtn";
                    this.mUIЗадатьпараметрытестаButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIЗадатьпараметрытестаButton;
            }
        }
        
        public WpfButton UIНазадButton
        {
            get
            {
                if ((this.mUIНазадButton == null))
                {
                    this.mUIНазадButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIНазадButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "backBtn";
                    this.mUIНазадButton.WindowTitles.Add("Сетевые информационные технологии");
                    #endregion
                }
                return this.mUIНазадButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIРедактироватьдобавитButton;
        
        private WpfButton mUIЗадатьпараметрытестаButton;
        
        private WpfButton mUIНазадButton;
        #endregion
    }
}
